"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[7289],{1184:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var s=i(4041);const r={},d=s.createContext(r);function t(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(d.Provider,{value:n},e.children)}},7702:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"advanced-customization/custom-templates","title":"Custom Templates","description":"This is an advanced feature that lets you customize even more aspects of the form:","source":"@site/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md","sourceDirName":"advanced-customization","slug":"/advanced-customization/custom-templates","permalink":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/custom-templates","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/custom-templates.md","tags":[],"version":"4.2.3","frontMatter":{},"sidebar":"docs","previous":{"title":"Advanced Customization","permalink":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/"},"next":{"title":"Custom Themes","permalink":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/custom-themes"}}');var r=i(1085),d=i(1184);const t={},l="Custom Templates",c={},o=[{value:"ArrayFieldTemplate",id:"arrayfieldtemplate",level:2},{value:"FieldTemplate",id:"fieldtemplate",level:2},{value:"ObjectFieldTemplate",id:"objectfieldtemplate",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"custom-templates",children:"Custom Templates"})}),"\n",(0,r.jsx)(n.p,{children:"This is an advanced feature that lets you customize even more aspects of the form:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"_"}),(0,r.jsx)(n.th,{children:"Custom Field"}),(0,r.jsx)(n.th,{children:"Custom Template"}),(0,r.jsx)(n.th,{children:"Custom Widget"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"What it does"})}),(0,r.jsx)(n.td,{children:"Overrides all behaviour"}),(0,r.jsx)(n.td,{children:"Overrides just the layout (not behaviour)"}),(0,r.jsx)(n.td,{children:"Overrides just the input box (not layout, labels, or help, or validation)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Usage"})}),(0,r.jsx)(n.td,{children:"Global or per-field"}),(0,r.jsx)(n.td,{children:"Global or per-field"}),(0,r.jsx)(n.td,{children:"Global or per-field"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Global Example"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<Form fields={MyCustomField} />"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<Form ArrayFieldTemplate={MyArrayTemplate} />"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<Form widgets={MyCustomWidget} />"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Per-Field Example"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"ui:field": MyCustomField'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"ui:ArrayFieldTemplate": MyArrayTemplate'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"ui:widget":MyCustomWidget'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Documentation"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/custom-widgets-fields",children:"Custom Fields"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"#FieldTemplate",children:"FieldTemplate"})," / ",(0,r.jsx)(n.a,{href:"#ArrayFieldTemplate",children:"ArrayFieldTemplate"})," / ",(0,r.jsx)(n.a,{href:"#ObjectFieldTemplate",children:"ObjectFieldTemplate"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/custom-widgets-fields",children:"Custom Widgets"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"arrayfieldtemplate",children:"ArrayFieldTemplate"}),"\n",(0,r.jsxs)(n.p,{children:["You can use an ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplate"})," to customize how your arrays are rendered.\nThis allows you to customize your array, and each element in the array. You can also customize arrays by specifying a widget in the relevant ",(0,r.jsx)(n.code,{children:"ui:widget"})," schema, more details over on ",(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-4.2.3/usage/arrays#custom-widgets",children:"Custom Widgets"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "array",\n  items: {\n    type: "string"\n  }\n};\n\nfunction ArrayFieldTemplate(props) {\n  return (\n    <div>\n      {props.items.map(element => element.children)}\n      {props.canAdd && <button type="button" onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        ArrayFieldTemplate={ArrayFieldTemplate} />\n), document.getElementById("app"));\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You also can provide your own field template to a uiSchema by specifying a ",(0,r.jsx)(n.code,{children:"ui:ArrayFieldTemplate"})," property."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const uiSchema = {\n  "ui:ArrayFieldTemplate": ArrayFieldTemplate\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Please see ",(0,r.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/blob/4542cd254ffdc6dfaf55e8c9f6f17dc900d0d041/packages/playground/src/samples/customArray.js",children:"customArray.js"})," for another example."]}),"\n",(0,r.jsxs)(n.p,{children:["The following props are passed to each ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplate"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DescriptionField"}),": The ",(0,r.jsx)(n.code,{children:"DescriptionField"})," from the registry (in case you wanted to utilize it)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TitleField"}),": The ",(0,r.jsx)(n.code,{children:"TitleField"})," from the registry (in case you wanted to utilize it)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"canAdd"}),": A boolean value stating whether new elements can be added to the array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"className"}),": The className string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"disabled"}),": A boolean value stating if the array is disabled."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"idSchema"}),": Object"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"items"}),": An array of objects representing the items in the array. Each of the items represent a child with properties described below."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onAddClick: (event?) => void"}),": A function that adds a new item to the array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"readonly"}),": A boolean value stating if the array is read-only."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"required"}),": A boolean value stating if the array is required."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"schema"}),": The schema object for this array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"uiSchema"}),": The uiSchema object for this array field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"title"}),": A string value containing the title for the array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formContext"}),": The ",(0,r.jsx)(n.code,{children:"formContext"})," object that you passed to Form."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formData"}),": The formData for this array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"registry"}),": The ",(0,r.jsx)(n.code,{children:"registry"})," object."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The following props are part of each element in ",(0,r.jsx)(n.code,{children:"items"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"children"}),": The html for the item's content."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"className"}),": The className string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"disabled"}),": A boolean value stating if the array item is disabled."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasMoveDown"}),": A boolean value stating whether the array item can be moved down."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasMoveUp"}),": A boolean value stating whether the array item can be moved up."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasRemove"}),": A boolean value stating whether the array item can be removed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasToolbar"}),": A boolean value stating whether the array item has a toolbar."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index"}),": A number stating the index the array item occurs in ",(0,r.jsx)(n.code,{children:"items"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"key"}),": A stable, unique key for the array item."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onAddIndexClick: (index) => (event?) => void"}),": Returns a function that adds a new item at ",(0,r.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onDropIndexClick: (index) => (event?) => void"}),": Returns a function that removes the item at ",(0,r.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onReorderClick: (index, newIndex) => (event?) => void"}),": Returns a function that swaps the items at ",(0,r.jsx)(n.code,{children:"index"})," with ",(0,r.jsx)(n.code,{children:"newIndex"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"readonly"}),": A boolean value stating if the array item is read-only."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Note: Array and object field templates are always rendered inside of the FieldTemplate. To fully customize an array field template, you may need to specify both ",(0,r.jsx)(n.code,{children:"ui:FieldTemplate"})," and ",(0,r.jsx)(n.code,{children:"ui:ArrayFieldTemplate"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"fieldtemplate",children:"FieldTemplate"}),"\n",(0,r.jsxs)(n.p,{children:["To take control over the inner organization of each field (each form row), you can define a ",(0,r.jsx)(n.em,{children:"field template"})," for your form."]}),"\n",(0,r.jsx)(n.p,{children:"A field template is basically a React stateless component being passed field-related props, allowing you to structure your form row as you like."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string"\n};\n\nfunction CustomFieldTemplate(props) {\n  const {id, classNames, label, help, required, description, errors, children} = props;\n  return (\n    <div className={classNames}>\n      <label htmlFor={id}>{label}{required ? "*" : null}</label>\n      {description}\n      {children}\n      {errors}\n      {help}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        FieldTemplate={CustomFieldTemplate} />\n), document.getElementById("app"));\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You also can provide your own field template to a uiSchema by specifying a ",(0,r.jsx)(n.code,{children:"ui:FieldTemplate"})," property."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const uiSchema = {\n  "ui:FieldTemplate": CustomFieldTemplate\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you want to handle the rendering of each element yourself, you can use the props ",(0,r.jsx)(n.code,{children:"rawHelp"}),", ",(0,r.jsx)(n.code,{children:"rawDescription"})," and ",(0,r.jsx)(n.code,{children:"rawErrors"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The following props are passed to a custom field template component:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"id"}),": The id of the field in the hierarchy. You can use it to render a label targeting the wrapped widget."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"classNames"}),": A string containing the base Bootstrap CSS classes, merged with any ",(0,r.jsx)(n.a,{href:"#custom-css-class-names",children:"custom ones"})," defined in your uiSchema."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label"}),": The computed label for this field, as a string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"}),": A component instance rendering the field description, if one is defined (this will use any ",(0,r.jsxs)(n.a,{href:"#custom-descriptions",children:["custom ",(0,r.jsx)(n.code,{children:"DescriptionField"})]})," defined)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rawDescription"}),": A string containing any ",(0,r.jsx)(n.code,{children:"ui:description"})," uiSchema directive defined."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"children"}),": The field or widget component instance for this field row."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"errors"}),": A component instance listing any encountered errors for this field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rawErrors"}),": An array of strings listing all generated error messages from encountered errors for this field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"help"}),": A component instance rendering any ",(0,r.jsx)(n.code,{children:"ui:help"})," uiSchema directive defined."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rawHelp"}),": A string containing any ",(0,r.jsx)(n.code,{children:"ui:help"})," uiSchema directive defined. ",(0,r.jsx)(n.strong,{children:"NOTE:"})," ",(0,r.jsx)(n.code,{children:"rawHelp"})," will be ",(0,r.jsx)(n.code,{children:"undefined"})," if passed ",(0,r.jsx)(n.code,{children:"ui:help"})," is a React component instead of a string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hidden"}),": A boolean value stating if the field should be hidden."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"required"}),": A boolean value stating if the field is required."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"readonly"}),": A boolean value stating if the field is read-only."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hideError"}),": A boolean value stating if the field is hiding its errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"disabled"}),": A boolean value stating if the field is disabled."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"displayLabel"}),": A boolean value stating if the label should be rendered or not. This is useful for nested fields in arrays where you don't want to clutter the UI."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fields"}),": An array containing all Form's fields including your ",(0,r.jsx)(n.a,{href:"#custom-field-components",children:"custom fields"})," and the built-in fields."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"schema"}),": The schema object for this field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"uiSchema"}),": The uiSchema object for this field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onChange"}),": The value change event handler; Can be called with a new value to change the value for this field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formContext"}),": The ",(0,r.jsx)(n.code,{children:"formContext"})," object that you passed to Form."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formData"}),": The formData for this field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"registry"}),": The ",(0,r.jsx)(n.code,{children:"registry"})," object."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Note: you can only define a single global field template for a form, but you can set individual field templates per property using ",(0,r.jsx)(n.code,{children:'"ui:FieldTemplate"'}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"objectfieldtemplate",children:"ObjectFieldTemplate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "object",\n  title: "Object title",\n  description: "Object description",\n  properties: {\n    name: {\n      type: "string"\n    },\n    age: {\n      type: "number"\n    }\n  }\n};\n\nfunction ObjectFieldTemplate(props) {\n  return (\n    <div>\n      {props.title}\n      {props.description}\n      {props.properties.map(element => <div className="property-wrapper">{element.content}</div>)}\n    </div>\n  );\n}\n\nrender((\n  <Form schema={schema}\n        ObjectFieldTemplate={ObjectFieldTemplate} />\n), document.getElementById("app"));\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You also can provide your own field template to a uiSchema by specifying a ",(0,r.jsx)(n.code,{children:"ui:ObjectFieldTemplate"})," property."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const uiSchema = {\n  "ui:ObjectFieldTemplate": ObjectFieldTemplate\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Please see ",(0,r.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/blob/4542cd254ffdc6dfaf55e8c9f6f17dc900d0d041/packages/playground/src/samples/customObject.js",children:"customObject.js"})," for a better example."]}),"\n",(0,r.jsxs)(n.p,{children:["The following props are passed to each ",(0,r.jsx)(n.code,{children:"ObjectFieldTemplate"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DescriptionField"}),": The ",(0,r.jsx)(n.code,{children:"DescriptionField"})," from the registry (in case you wanted to utilize it)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TitleField"}),": The ",(0,r.jsx)(n.code,{children:"TitleField"})," from the registry (in case you wanted to utilize it)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"title"}),": A string value containing the title for the object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"}),": A string value containing the description for the object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"disabled"}),": A boolean value stating if the object is disabled."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"properties"}),": An array of object representing the properties in the array. Each of the properties represent a child with properties described below."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onAddClick: (schema: JSONSchema7) => () => void"}),": Returns a function that adds a new property to the object (to be used with additionalProperties)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"readonly"}),": A boolean value stating if the object is read-only."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"required"}),": A boolean value stating if the object is required."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"schema"}),": The schema object for this object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"uiSchema"}),": The uiSchema object for this object field."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"idSchema"}),": An object containing the id for this object & ids for it's properties."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formData"}),": The form data for the object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"formContext"}),": The ",(0,r.jsx)(n.code,{children:"formContext"})," object that you passed to Form."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"registry"}),": The ",(0,r.jsx)(n.code,{children:"registry"})," object."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The following props are part of each element in ",(0,r.jsx)(n.code,{children:"properties"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"content"}),": The html for the property's content."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": A string representing the property name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"disabled"}),": A boolean value stating if the object property is disabled."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"readonly"}),": A boolean value stating if the property is read-only."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hidden"}),": A boolean value stating if the property should be hidden."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Note: Array and object field templates are always rendered inside of the FieldTemplate. To fully customize an object field template, you may need to specify both ",(0,r.jsx)(n.code,{children:"ui:FieldTemplate"})," and ",(0,r.jsx)(n.code,{children:"ui:ObjectFieldTemplate"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);