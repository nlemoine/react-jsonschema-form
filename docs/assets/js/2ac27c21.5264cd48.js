"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[4126],{1184:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var o=s(4041);const a={},r=o.createContext(a);function t(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),o.createElement(r.Provider,{value:n},e.children)}},7282:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"usage/oneof","title":"oneOf, anyOf, and allOf","description":"react-jsonschema-form supports custom widgets for oneOf, anyOf, and allOf.","source":"@site/versioned_docs/version-3.2.1/usage/oneof.md","sourceDirName":"usage","slug":"/usage/oneof","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/oneof","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/usage/oneof.md","tags":[],"version":"3.2.1","frontMatter":{},"sidebar":"docs","previous":{"title":"Objects","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/objects"},"next":{"title":"Single fields","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/single"}}');var a=s(1085),r=s(1184);const t={},c="oneOf, anyOf, and allOf",l={},i=[{value:"oneOf",id:"oneof",level:2},{value:"anyOf",id:"anyof",level:2},{value:"allOf",id:"allof",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"oneof-anyof-and-allof",children:"oneOf, anyOf, and allOf"})}),"\n",(0,a.jsx)(n.p,{children:"react-jsonschema-form supports custom widgets for oneOf, anyOf, and allOf."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A schema with ",(0,a.jsx)(n.code,{children:"oneOf"})," is valid if ",(0,a.jsx)(n.em,{children:"exactly one"})," of the subschemas is valid."]}),"\n",(0,a.jsxs)(n.li,{children:["A schema with ",(0,a.jsx)(n.code,{children:"anyOf"})," is valid if ",(0,a.jsx)(n.em,{children:"at least one"})," of the subschemas is valid."]}),"\n",(0,a.jsxs)(n.li,{children:["A schema with ",(0,a.jsx)(n.code,{children:"allOf"})," is valid if ",(0,a.jsx)(n.em,{children:"all"})," of the subschemas are valid."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"oneof",children:"oneOf"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n    type: "object",\n    oneOf: [\n      {\n        properties: {\n          lorem: {\n            type: "string",\n          },\n        },\n        required: ["lorem"],\n      },\n      {\n        properties: {\n          ipsum: {\n            type: "string",\n          },\n        },\n        required: ["ipsum"],\n      },\n    ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,a.jsx)(n.h2,{id:"anyof",children:"anyOf"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n    type: "object",\n    anyOf: [\n      {\n        properties: {\n          lorem: {\n            type: "string",\n          },\n        },\n        required: ["lorem"],\n      },\n      {\n        properties: {\n          lorem: {\n            type: "string",\n          },\n          ipsum: {\n            type: "string",\n          },\n        }\n      },\n    ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,a.jsx)(n.h2,{id:"allof",children:"allOf"}),"\n",(0,a.jsxs)(n.p,{children:["When ",(0,a.jsx)(n.code,{children:"allOf"})," is specified in a schema, react-jsonschema-form uses the ",(0,a.jsx)(n.a,{href:"https://github.com/mokkabonna/json-schema-merge-allof",children:"json-schema-merge-allof"})," library to merge the specified subschemas to create a combined subschema that is valid. For example, the below schema evaluates to a combined subschema of ",(0,a.jsx)(n.code,{children:'{type: "boolean"}'}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  title: "Field",\n  allOf: [\n    {\n      type: ["string", "boolean"]\n    },\n    {\n      type: "boolean"\n    },\n  ],\n  };\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);