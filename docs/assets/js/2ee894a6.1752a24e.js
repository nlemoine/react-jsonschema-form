"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[9821],{1184:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var i=a(4041);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},7040:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"json-schema/arrays","title":"Arrays","description":"Arrays are defined with a type equal to array, and array items\' schemas are specified in the items keyword.","source":"@site/versioned_docs/version-5.24.10/json-schema/arrays.md","sourceDirName":"json-schema","slug":"/json-schema/arrays","permalink":"/react-jsonschema-form/docs/version-5.24.10/json-schema/arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-5.24.10/json-schema/arrays.md","tags":[],"version":"5.24.10","frontMatter":{},"sidebar":"docs","previous":{"title":"JSON Schema","permalink":"/react-jsonschema-form/docs/version-5.24.10/json-schema/"},"next":{"title":"Schema definitions and references","permalink":"/react-jsonschema-form/docs/version-5.24.10/json-schema/definitions"}}');var t=a(1085),r=a(1184);const s={},o="Arrays",c={},d=[{value:"Arrays of a single field",id:"arrays-of-a-single-field",level:2},{value:"Arrays of objects",id:"arrays-of-objects",level:2},{value:"uiSchema for array items",id:"uischema-for-array-items",level:2},{value:"The <code>additionalItems</code> keyword",id:"the-additionalitems-keyword",level:2},{value:"Array item uiSchema options",id:"array-item-uischema-options",level:2},{value:"<code>orderable</code> option",id:"orderable-option",level:3},{value:"<code>addable</code> option",id:"addable-option",level:3},{value:"<code>copyable</code> option",id:"copyable-option",level:3},{value:"<code>removable</code> option",id:"removable-option",level:3},{value:"Multiple-choice list",id:"multiple-choice-list",level:2},{value:"Custom widgets",id:"custom-widgets",level:2},{value:"Specifying the minimum or maximum number of items",id:"specifying-the-minimum-or-maximum-number-of-items",level:2},{value:"Inline checkboxes",id:"inline-checkboxes",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"arrays",children:"Arrays"})}),"\n",(0,t.jsxs)(n.p,{children:["Arrays are defined with a type equal to ",(0,t.jsx)(n.code,{children:"array"}),", and array items' schemas are specified in the ",(0,t.jsx)(n.code,{children:"items"})," keyword."]}),"\n",(0,t.jsx)(n.h2,{id:"arrays-of-a-single-field",children:"Arrays of a single field"}),"\n",(0,t.jsx)(n.p,{children:"Arrays of a single field type can be specified as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"arrays-of-objects",children:"Arrays of objects"}),"\n",(0,t.jsx)(n.p,{children:"Arrays of objects can be specified as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      name: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"uischema-for-array-items",children:"uiSchema for array items"}),"\n",(0,t.jsxs)(n.p,{children:["To specify a uiSchema that applies to array items, specify the uiSchema value within the ",(0,t.jsx)(n.code,{children:"items"})," property:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema = {\n  items: {\n    'ui:widget': 'textarea',\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"the-additionalitems-keyword",children:["The ",(0,t.jsx)(n.code,{children:"additionalItems"})," keyword"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"additionalItems"})," keyword allows the user to add additional items of a given schema. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n  additionalItems: {\n    type: 'boolean',\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"array-item-uischema-options",children:"Array item uiSchema options"}),"\n",(0,t.jsxs)(n.p,{children:["Any of these options can be set globally if they are contained within the ",(0,t.jsx)(n.code,{children:"ui:globalOptions"})," block.\nThey can also be overridden on a per-field basis inside a ",(0,t.jsx)(n.code,{children:"ui:options"})," block as shown below."]}),"\n",(0,t.jsxs)(n.h3,{id:"orderable-option",children:[(0,t.jsx)(n.code,{children:"orderable"})," option"]}),"\n",(0,t.jsxs)(n.p,{children:["Array items are orderable by default, and react-jsonschema-form renders move up/down buttons alongside them. The uiSchema ",(0,t.jsx)(n.code,{children:"orderable"})," options allows you to disable ordering:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    orderable: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"addable-option",children:[(0,t.jsx)(n.code,{children:"addable"})," option"]}),"\n",(0,t.jsxs)(n.p,{children:["If either ",(0,t.jsx)(n.code,{children:"items"})," or ",(0,t.jsx)(n.code,{children:"additionalItems"})," contains a schema object, an add button for new items is shown by default. You can turn this off with the ",(0,t.jsx)(n.code,{children:"addable"})," option in ",(0,t.jsx)(n.code,{children:"uiSchema"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    addable: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"copyable-option",children:[(0,t.jsx)(n.code,{children:"copyable"})," option"]}),"\n",(0,t.jsxs)(n.p,{children:["A copy button is ",(0,t.jsx)(n.strong,{children:"NOT"})," shown by default for an item if ",(0,t.jsx)(n.code,{children:"items"})," contains a schema object, or the item is an ",(0,t.jsx)(n.code,{children:"additionalItems"})," instance.\nYou can turn this ",(0,t.jsx)(n.strong,{children:"ON"})," with the ",(0,t.jsx)(n.code,{children:"copyable"})," option in ",(0,t.jsx)(n.code,{children:"uiSchema"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    copyable: true,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"removable-option",children:[(0,t.jsx)(n.code,{children:"removable"})," option"]}),"\n",(0,t.jsxs)(n.p,{children:["A remove button is shown by default for an item if ",(0,t.jsx)(n.code,{children:"items"})," contains a schema object, or the item is an ",(0,t.jsx)(n.code,{children:"additionalItems"})," instance. You can turn this off with the ",(0,t.jsx)(n.code,{children:"removable"})," option in ",(0,t.jsx)(n.code,{children:"uiSchema"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    removable: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"multiple-choice-list",children:"Multiple-choice list"}),"\n",(0,t.jsxs)(n.p,{children:["The default behavior for array fields is a list of text inputs with add/remove buttons. There are two alternative widgets for picking multiple elements from a list of choices. Typically, this applies when a schema has an ",(0,t.jsx)(n.code,{children:"enum"})," list for the ",(0,t.jsx)(n.code,{children:"items"})," property of an ",(0,t.jsx)(n.code,{children:"array"})," field, and the ",(0,t.jsx)(n.code,{children:"uniqueItems"})," property set to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["By default, this will render a multiple select box. If you prefer a list of checkboxes, just set the uiSchema ",(0,t.jsx)(n.code,{children:"ui:widget"})," directive to ",(0,t.jsx)(n.code,{children:"checkboxes"})," for that field:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'checkboxes',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"custom-widgets",children:"Custom widgets"}),"\n",(0,t.jsxs)(n.p,{children:["In addition to ",(0,t.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-templates#arrayfieldtemplate",children:"ArrayFieldTemplate"})," you use your own widget by providing it to the uiSchema with the property of ",(0,t.jsx)(n.code,{children:"ui:widget"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst CustomSelectComponent = (props) => {\n  return (\n    <select>\n      {props.value.map((item, index) => (\n        <option key={index} id='custom-select'>\n          {item}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'CustomSelect',\n};\n\nconst widgets = {\n  CustomSelect: CustomSelectComponent,\n};\n\nrender(\n  <Form schema={schema} uiSchema={uiSchema} widgets={widgets} validator={validator} />,\n  document.getElementById('app')\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"specifying-the-minimum-or-maximum-number-of-items",children:"Specifying the minimum or maximum number of items"}),"\n",(0,t.jsxs)(n.p,{children:["Note that when an array property is marked as ",(0,t.jsx)(n.code,{children:"required"}),", an empty array is considered valid. If the array needs to be populated, you can specify the minimum number of items using the ",(0,t.jsx)(n.code,{children:"minItems"})," property."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  minItems: 2,\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also specify the maximum number of items in an array using the ",(0,t.jsx)(n.code,{children:"maxItems"})," property."]}),"\n",(0,t.jsx)(n.h2,{id:"inline-checkboxes",children:"Inline checkboxes"}),"\n",(0,t.jsxs)(n.p,{children:["By default, checkboxes are stacked. If you prefer them inline, set the ",(0,t.jsx)(n.code,{children:"inline"})," property to ",(0,t.jsx)(n.code,{children:"true"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  minItems: 2,\n  title: 'A multiple-choice list',\n  items: {\n    type: 'string',\n    enum: ['foo', 'bar', 'fuzz', 'qux'],\n  },\n  uniqueItems: true,\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'checkboxes',\n  'ui:options': {\n    inline: true,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);