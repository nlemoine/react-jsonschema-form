"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[2646],{1184:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(4041);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}},7190:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"usage/single","title":"Single fields","description":"The simplest example of a JSON Schema contains only a single field. The field type is determined by the type parameter.","source":"@site/versioned_docs/version-3.2.1/usage/single.md","sourceDirName":"usage","slug":"/usage/single","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/single","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/usage/single.md","tags":[],"version":"3.2.1","frontMatter":{},"sidebar":"docs","previous":{"title":"oneOf, anyOf, and allOf","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/oneof"},"next":{"title":"Themes","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/themes"}}');var i=s(1085),l=s(1184);const a={},r="Single fields",c={},o=[{value:"Field types",id:"field-types",level:2},{value:"Titles and descriptions",id:"titles-and-descriptions",level:2},{value:"Enumerated values",id:"enumerated-values",level:2},{value:"Custom labels for <code>enum</code> fields",id:"custom-labels-for-enum-fields",level:3},{value:"Alternative JSON-Schema compliant approach",id:"alternative-json-schema-compliant-approach",level:4},{value:"Disabled attribute for <code>enum</code> fields",id:"disabled-attribute-for-enum-fields",level:3},{value:"Nullable types",id:"nullable-types",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"single-fields",children:"Single fields"})}),"\n",(0,i.jsxs)(n.p,{children:["The simplest example of a JSON Schema contains only a single field. The field type is determined by the ",(0,i.jsx)(n.code,{children:"type"})," parameter."]}),"\n",(0,i.jsx)(n.h2,{id:"field-types",children:"Field types"}),"\n",(0,i.jsx)(n.p,{children:"The base field types in JSON Schema include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"string"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"number"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"integer"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"boolean"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"null"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here is an example of a string field:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"titles-and-descriptions",children:"Titles and descriptions"}),"\n",(0,i.jsxs)(n.p,{children:["Fields can have titles and descriptions specified by the ",(0,i.jsx)(n.code,{children:"title"})," keyword in the schema and ",(0,i.jsx)(n.code,{children:"description"})," keyword in the schema, respectively. These two can also be overriden by the ",(0,i.jsx)(n.code,{children:"ui:title"})," and ",(0,i.jsx)(n.code,{children:"ui:description"})," keywords in the uiSchema."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  title: "My form",\n  description: "My description",\n  type: "string"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"enumerated-values",children:"Enumerated values"}),"\n",(0,i.jsxs)(n.p,{children:["All base schema types support the ",(0,i.jsx)(n.code,{children:"enum"})," attribute, which restricts the user to select among a list of options. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string",\n  enum: ["one", "two", "three"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"custom-labels-for-enum-fields",children:["Custom labels for ",(0,i.jsx)(n.code,{children:"enum"})," fields"]}),"\n",(0,i.jsxs)(n.p,{children:["This library supports a custom ",(0,i.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/57",children:(0,i.jsx)(n.code,{children:"enumNames"})})," property for ",(0,i.jsx)(n.code,{children:"enum"})," fields, which, however is not JSON-Schema compliant (see below for a compliant approach). The ",(0,i.jsx)(n.code,{children:"enumNames"})," property allows defining custom labels for each option of an ",(0,i.jsx)(n.code,{children:"enum"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "number",\n  enum: [1, 2, 3],\n  enumNames: ["one", "two", "three"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,i.jsx)(n.h4,{id:"alternative-json-schema-compliant-approach",children:"Alternative JSON-Schema compliant approach"}),"\n",(0,i.jsxs)(n.p,{children:["JSON Schema has an alternative approach to enumerations using ",(0,i.jsx)(n.code,{children:"anyOf"}),"; react-jsonschema-form supports it as well."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  "type": "number",\n  "anyOf": [\n    {\n      "type": "number",\n      "title": "one",\n      "enum": [\n        1\n      ]\n    },\n    {\n      "type": "number",\n      "title": "two",\n      "enum": [\n        2\n      ]\n    },\n    {\n      "type": "number",\n      "title": "three",\n      "enum": [\n        3\n      ]\n    }\n  ]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"disabled-attribute-for-enum-fields",children:["Disabled attribute for ",(0,i.jsx)(n.code,{children:"enum"})," fields"]}),"\n",(0,i.jsxs)(n.p,{children:["To disable an option, use the ",(0,i.jsx)(n.code,{children:"ui:enumDisabled"})," property in the uiSchema."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "boolean",\n  enum: [true, false]\n};\n\nconst uiSchema={\n  "ui:enumDisabled": [true],\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"nullable-types",children:"Nullable types"}),"\n",(0,i.jsx)(n.p,{children:"JSON Schema supports specifying multiple types in an array; however, react-jsonschema-form only supports a restricted subset of this -- nullable types, in which an element is either a given type or equal to null."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: ["string", "null"]\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);