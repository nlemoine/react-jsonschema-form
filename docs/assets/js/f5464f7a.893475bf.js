"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[1296],{1184:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var i=s(4041);const d={},t=i.createContext(d);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},9312:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"usage/widgets","title":"Widgets","description":"The uiSchema ui:widget property tells the form which UI widget should be used to render a field.","source":"@site/versioned_docs/version-3.2.1/usage/widgets.md","sourceDirName":"usage","slug":"/usage/widgets","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/widgets","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/usage/widgets.md","tags":[],"version":"3.2.1","frontMatter":{},"sidebar":"docs","previous":{"title":"Validation","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/validation"}}');var d=s(1085),t=s(1184);const l={},r="Widgets",c={},o=[{value:"For <code>boolean</code> fields",id:"for-boolean-fields",level:2},{value:"For <code>string</code> fields",id:"for-string-fields",level:2},{value:"String formats",id:"string-formats",level:3},{value:"For <code>number</code> and <code>integer</code> fields",id:"for-number-and-integer-fields",level:2},{value:"Hidden widgets",id:"hidden-widgets",level:2},{value:"File widgets",id:"file-widgets",level:2},{value:"Multiple files",id:"multiple-files",level:3},{value:"File widget input ref",id:"file-widget-input-ref",level:3},{value:"<code>accept</code> option",id:"accept-option",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"widgets",children:"Widgets"})}),"\n",(0,d.jsxs)(n.p,{children:["The uiSchema ",(0,d.jsx)(n.code,{children:"ui:widget"})," property tells the form which UI widget should be used to render a field."]}),"\n",(0,d.jsx)(n.p,{children:"Example:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "object",\n  properties: {\n    done: {\n      type: "boolean"\n    }\n  }\n};\n\nconst uiSchema = \xa0{\n  done: {\n    "ui:widget": "radio" // could also be "select"\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,d.jsx)(n.p,{children:"Here's a list of supported alternative widgets for different JSON Schema data types:"}),"\n",(0,d.jsxs)(n.h2,{id:"for-boolean-fields",children:["For ",(0,d.jsx)(n.code,{children:"boolean"})," fields"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"radio"}),": a radio button group with ",(0,d.jsx)(n.code,{children:"true"})," and ",(0,d.jsx)(n.code,{children:"false"})," as selectable values;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"select"}),": a select box with ",(0,d.jsx)(n.code,{children:"true"})," and ",(0,d.jsx)(n.code,{children:"false"})," as options;"]}),"\n",(0,d.jsx)(n.li,{children:"by default, a checkbox is used"}),"\n"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Note: To set the labels for a boolean field, instead of using ",(0,d.jsx)(n.code,{children:"true"})," and ",(0,d.jsx)(n.code,{children:"false"})," you can set ",(0,d.jsx)(n.code,{children:"enumNames"})," in your schema. Note that ",(0,d.jsx)(n.code,{children:"enumNames"})," belongs in your ",(0,d.jsx)(n.code,{children:"schema"}),", not the ",(0,d.jsx)(n.code,{children:"uiSchema"}),", and the order is always ",(0,d.jsx)(n.code,{children:"[true, false]"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"for-string-fields",children:["For ",(0,d.jsx)(n.code,{children:"string"})," fields"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"textarea"}),": a ",(0,d.jsx)(n.code,{children:"textarea"})," element is used;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"password"}),": an ",(0,d.jsx)(n.code,{children:"input[type=password]"})," element is used;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"color"}),": an ",(0,d.jsx)(n.code,{children:"input[type=color]"})," element is used;"]}),"\n",(0,d.jsxs)(n.li,{children:["by default, a regular ",(0,d.jsx)(n.code,{children:"input[type=text]"})," element is used."]}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"string-formats",children:"String formats"}),"\n",(0,d.jsxs)(n.p,{children:["The built-in string field also supports the JSON Schema ",(0,d.jsx)(n.code,{children:"format"})," property, and will render an appropriate widget by default for the following string formats:"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"email"}),": An ",(0,d.jsx)(n.code,{children:"input[type=email]"})," element is used;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"uri"}),": An ",(0,d.jsx)(n.code,{children:"input[type=url]"})," element is used;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"data-url"}),": By default, an ",(0,d.jsx)(n.code,{children:"input[type=file]"})," element is used; in case the string is part of an array, multiple files will be handled automatically (see ",(0,d.jsx)(n.a,{href:"#file-widgets",children:"File widgets"}),")."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"date"}),": By default, an ",(0,d.jsx)(n.code,{children:"input[type=date]"})," element is used;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"date-time"}),": By default, an ",(0,d.jsx)(n.code,{children:"input[type=datetime-local]"})," element is used."]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://i.imgur.com/xqu6Lcp.png",alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["Please note that, even though they are standardized, ",(0,d.jsx)(n.code,{children:"datetime-local"})," and ",(0,d.jsx)(n.code,{children:"date"})," input elements are not yet supported by Firefox and IE. If you plan on targeting these platforms, two alternative widgets are available:"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"alt-datetime"}),": Six ",(0,d.jsx)(n.code,{children:"select"})," elements are used to select the year, the month, the day, the hour, the minute and the second;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"alt-date"}),": Three ",(0,d.jsx)(n.code,{children:"select"})," elements are used to select the year, month and the day."]}),"\n"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"Firefox 57 - 66"}),": Firefox partially supporting ",(0,d.jsx)(n.code,{children:"date"})," and ",(0,d.jsx)(n.code,{children:"time"})," input types, but not ",(0,d.jsx)(n.code,{children:"datetime-local"}),", ",(0,d.jsx)(n.code,{children:"month"})," or ",(0,d.jsx)(n.code,{children:"week"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.img,{src:"https://i.imgur.com/VF5tY60.png",alt:""})}),"\n",(0,d.jsxs)(n.p,{children:["You can customize the list of years displayed in the ",(0,d.jsx)(n.code,{children:"year"})," dropdown by providing a ",(0,d.jsx)(n.code,{children:"yearsRange"})," property to ",(0,d.jsx)(n.code,{children:"ui:options"})," in your uiSchema. Its also possible to remove the ",(0,d.jsx)(n.code,{children:"Now"})," and ",(0,d.jsx)(n.code,{children:"Clear"})," buttons with the ",(0,d.jsx)(n.code,{children:"hideNowButton"})," and ",(0,d.jsx)(n.code,{children:"hideClearButton"})," options."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string"\n};\n\nconst uiSchema = {\n  "ui:widget": "alt-datetime",\n  "ui:options": {\n    yearsRange: [1980, 2030],\n    hideNowButton: true,\n    hideClearButton: true,\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,d.jsxs)(n.h2,{id:"for-number-and-integer-fields",children:["For ",(0,d.jsx)(n.code,{children:"number"})," and ",(0,d.jsx)(n.code,{children:"integer"})," fields"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"updown"}),": an ",(0,d.jsx)(n.code,{children:"input[type=number]"})," updown selector;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"range"}),": an ",(0,d.jsx)(n.code,{children:"input[type=range]"})," slider;"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"radio"}),": a radio button group with enum values. This can only be used when ",(0,d.jsx)(n.code,{children:"enum"})," values are specified for this input."]}),"\n",(0,d.jsxs)(n.li,{children:["By default, a regular ",(0,d.jsx)(n.code,{children:"input[type=text]"})," element is used."]}),"\n"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["Note: If JSON Schema's ",(0,d.jsx)(n.code,{children:"minimum"}),", ",(0,d.jsx)(n.code,{children:"maximum"})," and ",(0,d.jsx)(n.code,{children:"multipleOf"})," values are defined, the ",(0,d.jsx)(n.code,{children:"min"}),", ",(0,d.jsx)(n.code,{children:"max"})," and ",(0,d.jsx)(n.code,{children:"step"})," input attributes values will take those values."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"hidden-widgets",children:"Hidden widgets"}),"\n",(0,d.jsxs)(n.p,{children:["It's possible to use a hidden widget for a field by setting its ",(0,d.jsx)(n.code,{children:"ui:widget"})," uiSchema directive to ",(0,d.jsx)(n.code,{children:"hidden"}),":"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "object",\n  properties: {\n    foo: {type: "boolean"}\n  }\n};\n\nconst uiSchema = {\n  foo: {"ui:widget": "hidden"}\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,d.jsx)(n.p,{children:"Notes:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Hiding widgets is only supported for ",(0,d.jsx)(n.code,{children:"boolean"}),", ",(0,d.jsx)(n.code,{children:"string"}),", ",(0,d.jsx)(n.code,{children:"number"})," and ",(0,d.jsx)(n.code,{children:"integer"})," schema types;"]}),"\n",(0,d.jsxs)(n.li,{children:["A hidden widget takes its value from the ",(0,d.jsx)(n.code,{children:"formData"})," prop."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"file-widgets",children:"File widgets"}),"\n",(0,d.jsxs)(n.p,{children:["This library supports a limited form of ",(0,d.jsx)(n.code,{children:"input[type=file]"})," widgets, in the sense that it will propagate file contents to form data state as ",(0,d.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs",children:"data-url"}),"s."]}),"\n",(0,d.jsx)(n.p,{children:"There are two ways to use file widgets."}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["By declaring a ",(0,d.jsx)(n.code,{children:"string"})," json schema type along a ",(0,d.jsx)(n.code,{children:"data-url"})," ",(0,d.jsx)(n.a,{href:"#string-formats",children:"format"}),":"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string",\n  format: "data-url",\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,d.jsxs)(n.ol,{start:"2",children:["\n",(0,d.jsxs)(n.li,{children:["By specifying a ",(0,d.jsx)(n.code,{children:"ui:widget"})," field uiSchema directive as ",(0,d.jsx)(n.code,{children:"file"}),":"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:'const schema = {\n  type: "string",\n};\n\nconst uiSchema = {\n  "ui:widget": "file",\n};\n'})}),"\n",(0,d.jsx)(n.h3,{id:"multiple-files",children:"Multiple files"}),"\n",(0,d.jsxs)(n.p,{children:["Multiple files selectors are supported by defining an array of strings having ",(0,d.jsx)(n.code,{children:"data-url"})," as a format:"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-js",children:'const schema = {\n  type: "array",\n  items: {\n    type: "string",\n    format: "data-url",\n  }\n};\n'})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"Note that storing large dataURIs into form state might slow rendering."}),"\n"]}),"\n",(0,d.jsx)(n.h3,{id:"file-widget-input-ref",children:"File widget input ref"}),"\n",(0,d.jsxs)(n.p,{children:["The included ",(0,d.jsx)(n.code,{children:"FileWidget"})," exposes a reference to the ",(0,d.jsx)(n.code,{children:'<input type="file" />'})," element node as an ",(0,d.jsx)(n.code,{children:"inputRef"})," component property."]}),"\n",(0,d.jsx)(n.p,{children:"This allows you to programmatically trigger the browser's file selector, which can be used in a custom file widget."}),"\n",(0,d.jsxs)(n.h3,{id:"accept-option",children:[(0,d.jsx)(n.code,{children:"accept"})," option"]}),"\n",(0,d.jsx)(n.p,{children:"You can use the accept attribute to specify a filter for what file types the user can upload:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string",\n  format: "data-url"\n};\n\nconst uiSchema = {\n  "ui:options": { accept: ".pdf" }\n};\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}}}]);