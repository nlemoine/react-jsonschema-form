"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[9251],{1184:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var o=r(4041);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}},8535:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"quickstart","title":"Quickstart","description":"Let\'s walk through setup of a form after installing the dependency properly.","source":"@site/docs/01-quickstart.md","sourceDirName":".","slug":"/quickstart","permalink":"/react-jsonschema-form/docs/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/01-quickstart.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/react-jsonschema-form/docs/"},"next":{"title":"Advanced Customization","permalink":"/react-jsonschema-form/docs/advanced-customization/"}}');var t=r(1085),a=r(1184);const s={},c="Quickstart",i={},m=[{value:"Form schema",id:"form-schema",level:2},{value:"Form uiSchema",id:"form-uischema",level:2},{value:"Form initialization",id:"form-initialization",level:2},{value:"Form event handlers",id:"form-event-handlers",level:3},{value:"Controlled component",id:"controlled-component",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"quickstart",children:"Quickstart"})}),"\n",(0,t.jsxs)(n.p,{children:["Let's walk through setup of a form after installing the dependency properly.\nNOTE: As of version 5, the ",(0,t.jsx)(n.code,{children:"Form"})," now requires you to provide a ",(0,t.jsx)(n.code,{children:"validator"})," implementation. We recommend the one from ",(0,t.jsx)(n.code,{children:"@rjsf/validator-ajv8"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"form-schema",children:"Form schema"}),"\n",(0,t.jsxs)(n.p,{children:["First, specify a schema using the ",(0,t.jsx)(n.a,{href:"https://json-schema.org/",children:"JSON Schema specification"}),". The below schema renders a single string field:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also render an object with multiple fields with the below schema:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more information and examples of JSON Schema properties that this library supports, see ",(0,t.jsx)(n.a,{href:"/react-jsonschema-form/docs/json-schema/single",children:"Using JSON Schema"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"form-uischema",children:"Form uiSchema"}),"\n",(0,t.jsxs)(n.p,{children:["The uiSchema is used to add more customization to the form's look and feel. Use the ",(0,t.jsx)(n.code,{children:"classNames"}),"\nattribute of the uiSchema to add a custom CSS class name to the form:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:classNames': 'custom-css-class',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To customize object fields in the uiSchema, the structure of the\nuiSchema should be ",(0,t.jsx)(n.code,{children:"{key: value}"}),", where ",(0,t.jsx)(n.code,{children:"key"})," is the property key and ",(0,t.jsx)(n.code,{children:"value"})," is an\nobject with the uiSchema configuration for that particular property. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  name: {\n    'ui:classNames': 'custom-class-name',\n  },\n  age: {\n    'ui:classNames': 'custom-class-age',\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"form-initialization",children:"Form initialization"}),"\n",(0,t.jsxs)(n.p,{children:["Often you'll want to prefill a form with existing data; this is done by passing a ",(0,t.jsx)(n.code,{children:"formData"})," prop object matching the schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    title: {\n      type: 'string',\n    },\n    done: {\n      type: 'boolean',\n    },\n  },\n};\n\nconst formData = {\n  title: 'First task',\n  done: true,\n};\n\nrender(<Form schema={schema} formData={formData} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: If your form has a single field, pass a single value to ",(0,t.jsx)(n.code,{children:"formData"}),". ex: ",(0,t.jsx)(n.code,{children:'formData="Charlie"'})]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["WARNING: If you have situations where your parent component can re-render, make sure you listen to the ",(0,t.jsx)(n.code,{children:"onChange"})," event and update the data you pass to the ",(0,t.jsx)(n.code,{children:"formData"})," attribute."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"form-event-handlers",children:"Form event handlers"}),"\n",(0,t.jsxs)(n.p,{children:["You can use event handlers such as ",(0,t.jsx)(n.code,{children:"onChange"}),", ",(0,t.jsx)(n.code,{children:"onError"}),", ",(0,t.jsx)(n.code,{children:"onSubmit"}),", ",(0,t.jsx)(n.code,{children:"onFocus"}),", and ",(0,t.jsx)(n.code,{children:"onBlur"})," on the ",(0,t.jsx)(n.code,{children:"<Form />"})," component; see the ",(0,t.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/form-props",children:"Form Props Reference"})," for more details."]}),"\n",(0,t.jsx)(n.h3,{id:"controlled-component",children:"Controlled component"}),"\n",(0,t.jsxs)(n.p,{children:["By default, ",(0,t.jsx)(n.code,{children:"<Form />"})," is an ",(0,t.jsx)(n.a,{href:"https://reactjs.org/docs/uncontrolled-components.html",children:"uncontrolled component"}),". To make it a controlled component, use the\n",(0,t.jsx)(n.code,{children:"onChange"})," and ",(0,t.jsx)(n.code,{children:"formData"})," props as in the below example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport validator from '@rjsf/validator-ajv8';\n\nconst App = () => {\n  const [formData, setFormData] = React.useState(null);\n  return (\n    <Form\n      schema={{ type: 'string' }}\n      formData={formData}\n      onChange={(e) => setFormData(e.formData)}\n      validator={validator}\n    />\n  );\n};\n\nrender(<App />, document.getElementById('app'));\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);