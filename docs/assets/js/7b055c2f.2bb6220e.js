"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[9325],{1184:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>d});var n=s(4041);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}},9414:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"advanced-customization/custom-themes","title":"Custom Themes","description":"The withTheme component provides an easy way to extend the functionality of react-jsonschema-form by passing in a theme object that defines custom/overridden widgets and fields, as well as any of the other possible properties of the standard rjsf Form component.","source":"@site/versioned_docs/version-5.24.10/advanced-customization/custom-themes.md","sourceDirName":"advanced-customization","slug":"/advanced-customization/custom-themes","permalink":"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-themes","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-5.24.10/advanced-customization/custom-themes.md","tags":[],"version":"5.24.10","frontMatter":{},"sidebar":"docs","previous":{"title":"Custom Templates","permalink":"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-templates"},"next":{"title":"Custom Widgets and Fields","permalink":"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-widgets-fields"}}');var r=s(1085),o=s(1184);const i={},d="Custom Themes",a={},c=[{value:"Usage",id:"usage",level:2},{value:"Theme object properties",id:"theme-object-properties",level:2},{value:"Widgets and fields",id:"widgets-and-fields",level:3},{value:"Templates",id:"templates",level:3},{value:"Overriding other Form props",id:"overriding-other-form-props",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"custom-themes",children:"Custom Themes"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"withTheme"})," component provides an easy way to extend the functionality of react-jsonschema-form by passing in a theme object that defines custom/overridden widgets and fields, as well as any of the other possible properties of the standard rjsf ",(0,r.jsx)(t.code,{children:"Form"})," component.\nThis theme-defining object is passed as the only parameter to the HOC (",(0,r.jsx)(t.code,{children:"withTheme(ThemeObj)"}),"), and the HOC will return a themed-component which you use instead of the standard ",(0,r.jsx)(t.code,{children:"Form"})," component."]}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import React, { Component } from 'react';\nimport validator from '@rjsf/validator-ajv8';\nimport { withTheme, ThemeProps } from '@rjsf/core';\n\nconst theme: ThemeProps = { widgets: { test: () => <div>test</div> } };\n\nconst ThemedForm = withTheme(theme);\n\nconst Demo = () => <ThemedForm schema={schema} uiSchema={uiSchema} validator={validator} />;\n"})}),"\n",(0,r.jsx)(t.h2,{id:"theme-object-properties",children:"Theme object properties"}),"\n",(0,r.jsxs)(t.p,{children:["The Theme object consists of the same properties as the rjsf ",(0,r.jsx)(t.code,{children:"Form"})," component (such as ",(0,r.jsx)(t.strong,{children:"widgets"}),", ",(0,r.jsx)(t.strong,{children:"fields"})," and ",(0,r.jsx)(t.strong,{children:"templates"}),").\nThe themed-Form component merges together any theme-specific ",(0,r.jsx)(t.strong,{children:"widgets"}),", ",(0,r.jsx)(t.strong,{children:"fields"})," and ",(0,r.jsx)(t.strong,{children:"templates"})," with the default ",(0,r.jsx)(t.strong,{children:"widgets"}),", ",(0,r.jsx)(t.strong,{children:"fields"})," and ",(0,r.jsx)(t.strong,{children:"templates"}),".\nFor instance, providing a single widget in ",(0,r.jsx)(t.strong,{children:"widgets"})," will merge this widget with all the default widgets of the rjsf ",(0,r.jsx)(t.code,{children:"Form"})," component, but overrides the default if the theme's widget's name matches the default widget's name.\nThus, for each default widget or field not specified/overridden, the themed-form will rely on the defaults from the rjsf ",(0,r.jsx)(t.code,{children:"Form"}),".\nNote that you are not required to pass in either custom ",(0,r.jsx)(t.strong,{children:"widgets"}),", ",(0,r.jsx)(t.strong,{children:"fields"})," or ",(0,r.jsx)(t.strong,{children:"templates"})," when using the custom-themed HOC component;\nyou can essentially redefine the default Form by simply doing ",(0,r.jsx)(t.code,{children:"const Form = withTheme({});"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"widgets-and-fields",children:"Widgets and fields"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"widgets"})," and ",(0,r.jsx)(t.strong,{children:"fields"})," should be in the same format as shown ",(0,r.jsx)(t.a,{href:"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-widgets-fields",children:"here"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"Example theme with custom widget:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { WidgetProps, RegistryWidgetsType } from '@rjsf/utils';\nimport { ThemeProps } from '@rjsf/core';\n\nconst MyCustomWidget = (props: WidgetProps) => {\n  return (\n    <input\n      type='text'\n      className='custom'\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)}\n    />\n  );\n};\n\nconst myWidgets: RegistryWidgetsType = {\n  myCustomWidget: MyCustomWidget,\n};\n\nconst ThemeObject: ThemeProps = { widgets: myWidgets };\nexport default ThemeObject;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The above can be similarly done for ",(0,r.jsx)(t.strong,{children:"fields"})," and ",(0,r.jsx)(t.strong,{children:"templates"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"templates",children:"Templates"}),"\n",(0,r.jsxs)(t.p,{children:["Each template should be passed into the theme object via the ",(0,r.jsx)(t.strong,{children:"templates"})," object just as you would into the rjsf Form component. Here is an example of how to use a custom ",(0,r.jsx)(t.a,{href:"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-templates#arrayfieldtemplate",children:"ArrayFieldTemplate"})," and ",(0,r.jsx)(t.a,{href:"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-templates#errorlisttemplate",children:"ErrorListTemplate"})," in the theme object:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { ArrayFieldTemplateProps, ErrorListProps } from '@rjsf/utils';\nimport { ThemeProps } from '@rjsf/core';\n\nfunction MyArrayFieldTemplate(props: ArrayFieldTemplateProps) {\n  return (\n    <div>\n      {props.items.map((element) => element.children)}\n      {props.canAdd && <button type='button' onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nfunction MyErrorListTemplate(props: ErrorListProps) {\n  const { errors } = props;\n  return (\n    <ul>\n      {errors.map((error) => (\n        <li key={error.stack}>{error.stack}</li>\n      ))}\n    </ul>\n  );\n}\n\nconst ThemeObject: ThemeProps = {\n  templates: {\n    ArrayFieldTemplate: MyArrayFieldTemplate,\n    ErrorListTemplate: MyErrorListTemplate,\n  },\n  widgets: myWidgets,\n};\n\nexport default ThemeObject;\n"})}),"\n",(0,r.jsx)(t.h2,{id:"overriding-other-form-props",children:"Overriding other Form props"}),"\n",(0,r.jsxs)(t.p,{children:["Just as the theme can override ",(0,r.jsx)(t.strong,{children:"widgets"}),", ",(0,r.jsx)(t.strong,{children:"fields"}),", any of the ",(0,r.jsx)(t.strong,{children:"templates"}),", and set default values to properties like ",(0,r.jsx)(t.strong,{children:"showErrorList"}),", you can do the same with the instance of the withTheme() Form component."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import { ThemeProps } from '@rjsf/core';\n\nconst ThemeObject: ThemeProps = {\n  templates: {\n    ArrayFieldTemplate: MyArrayFieldTemplate,\n  },\n  fields: myFields,\n  showErrorList: false,\n  widgets: myWidgets,\n};\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Thus, the user has higher priority than the withTheme HOC, and the theme has higher priority than the default values of the rjsf Form component (",(0,r.jsx)(t.strong,{children:"User"})," > ",(0,r.jsx)(t.strong,{children:"Theme"})," > ",(0,r.jsx)(t.strong,{children:"Defaults"}),")."]})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);