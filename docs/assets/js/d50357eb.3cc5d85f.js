"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[2472],{1161:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"json-schema/oneof","title":"oneOf, anyOf, and allOf","description":"react-jsonschema-form supports custom widgets for oneOf, anyOf, and allOf.","source":"@site/docs/json-schema/oneof.md","sourceDirName":"json-schema","slug":"/json-schema/oneof","permalink":"/react-jsonschema-form/docs/json-schema/oneof","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/json-schema/oneof.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Objects","permalink":"/react-jsonschema-form/docs/json-schema/objects"},"next":{"title":"Single fields","permalink":"/react-jsonschema-form/docs/json-schema/single"}}');var o=s(1085),r=s(1184);const t={},c="oneOf, anyOf, and allOf",l={},i=[{value:"oneOf",id:"oneof",level:2},{value:"anyOf",id:"anyof",level:2},{value:"allOf",id:"allof",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"oneof-anyof-and-allof",children:"oneOf, anyOf, and allOf"})}),"\n",(0,o.jsx)(n.p,{children:"react-jsonschema-form supports custom widgets for oneOf, anyOf, and allOf."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["A schema with ",(0,o.jsx)(n.code,{children:"oneOf"})," is valid if ",(0,o.jsx)(n.em,{children:"exactly one"})," of the subschemas is valid."]}),"\n",(0,o.jsxs)(n.li,{children:["A schema with ",(0,o.jsx)(n.code,{children:"anyOf"})," is valid if ",(0,o.jsx)(n.em,{children:"at least one"})," of the subschemas is valid."]}),"\n",(0,o.jsxs)(n.li,{children:["A schema with ",(0,o.jsx)(n.code,{children:"allOf"})," is valid if ",(0,o.jsx)(n.em,{children:"all"})," of the subschemas are valid."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"oneof",children:"oneOf"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  oneOf: [\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n      },\n      required: ['lorem'],\n    },\n    {\n      properties: {\n        ipsum: {\n          type: 'string',\n        },\n      },\n      required: ['ipsum'],\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"anyof",children:"anyOf"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  anyOf: [\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n      },\n      required: ['lorem'],\n    },\n    {\n      properties: {\n        lorem: {\n          type: 'string',\n        },\n        ipsum: {\n          type: 'string',\n        },\n      },\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"allof",children:"allOf"}),"\n",(0,o.jsxs)(n.p,{children:["When ",(0,o.jsx)(n.code,{children:"allOf"})," is specified in a schema, react-jsonschema-form uses the ",(0,o.jsx)(n.a,{href:"https://github.com/mokkabonna/json-schema-merge-allof",children:"json-schema-merge-allof"})," library to merge the specified subschemas to create a combined subschema that is valid. For example, the below schema evaluates to a combined subschema of ",(0,o.jsx)(n.code,{children:'{type: "boolean"}'}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Field',\n  allOf: [\n    {\n      type: ['string', 'boolean'],\n    },\n    {\n      type: 'boolean',\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1184:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var a=s(4041);const o={},r=a.createContext(o);function t(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);