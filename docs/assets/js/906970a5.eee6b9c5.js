"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[2012],{1184:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var d=i(4041);const o={},l=d.createContext(o);function r(e){const n=d.useContext(l);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),d.createElement(l.Provider,{value:n},e.children)}},9822:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"api-reference/LayoutGridField","title":"LayoutGridField","description":"The LayoutGridField will render a schema, uiSchema and formData combination out into a GridTemplate in the shape","source":"@site/docs/api-reference/LayoutGridField.md","sourceDirName":"api-reference","slug":"/api-reference/LayoutGridField","permalink":"/react-jsonschema-form/docs/api-reference/LayoutGridField","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/api-reference/LayoutGridField.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"API Reference","permalink":"/react-jsonschema-form/docs/api-reference/"},"next":{"title":"Dynamic uiSchema Examples","permalink":"/react-jsonschema-form/docs/api-reference/dynamic-ui-schema-examples"}}');var o=i(1085),l=i(1184);const r={},s="LayoutGridField",c={},a=[{value:"ui",id:"ui",level:2},{value:"ui",id:"ui-1",level:2},{value:"ui",id:"ui-2",level:2},{value:"ui",id:"ui-3",level:2}];function t(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"layoutgridfield",children:"LayoutGridField"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"LayoutGridField"})," will render a schema, uiSchema and formData combination out into a ",(0,o.jsx)(n.code,{children:"GridTemplate"})," in the shape\ndescribed in the uiSchema. To define the grid to use to render the elements within a field in the schema, provide in\nthe uiSchema for that field the object contained under a ",(0,o.jsx)(n.code,{children:"ui:layoutGrid"})," element. E.g. (as a JSON object):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "field1" : {\n    "ui:field": "LayoutGridField",\n    "ui:layoutGrid": {\n      "ui:row": { ... }\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["See the ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/usage/layout-grid",children:"LayoutGridField usage"})," for more detailed walk-through on how to use the component. This page is condensed\nversion of the ",(0,o.jsx)(n.code,{children:"uiSchema"})," APIs for faster reference."]}),"\n",(0,o.jsxs)(n.h2,{id:"ui",children:["ui",":row"]}),"\n",(0,o.jsxs)(n.p,{children:["The outermost level of a ",(0,o.jsx)(n.code,{children:"LayoutGridField"})," is the ",(0,o.jsx)(n.code,{children:"ui:row"}),' that defines the nested rows, columns, and/or condition\nelements (i.e. "grid elements") in the grid. This definition is either a simple "grid elements" OR an object with\nnative ',(0,o.jsx)(n.code,{children:"GridTemplate"})," implementation-specific props and a ",(0,o.jsx)(n.code,{children:"children"}),' array of "grid elements". E.g. (as JSON objects):']}),"\n",(0,o.jsxs)(n.p,{children:["Simple ",(0,o.jsx)(n.code,{children:"ui:row"})," definition, without additional ",(0,o.jsx)(n.code,{children:"GridTemplate"})," props:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:row": [\n    { "ui:row"|"ui:col"|"ui:columns"|"ui:condition": ... },\n    ...\n  ]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Complex ",(0,o.jsx)(n.code,{children:"ui:row"})," definition, with additional ",(0,o.jsx)(n.code,{children:"GridTemplate"})," (this example uses ",(0,o.jsx)(n.code,{children:"@mui/material/Grid2"})," native props):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:row": {\n    "spacing": 2,\n    "size": {\n      "md": 4\n    },\n    "alignContent": "flex-start",\n    "className": "GridRow",\n    "children": [\n        {\n          "ui:row"|"ui:col"|"ui:columns"|"ui:condition": ...\n        },\n        ...\n      ]\n    }\n  }\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["NOTE: Special note about the native ",(0,o.jsx)(n.code,{children:"className"})," prop values. All className values will automatically be looked up in\nthe ",(0,o.jsx)(n.code,{children:"formContext.lookupMap"})," in case they have been defined using a CSS-in-JS approach. In other words, from the\nexample above, if the ",(0,o.jsx)(n.code,{children:"Form"})," was constructed with a ",(0,o.jsx)(n.code,{children:"layoutGridLookupMap"})," set to ",(0,o.jsx)(n.code,{children:"{ GridRow: cssInJs.GridRowClass }"}),"\nthen when rendered, the native ",(0,o.jsx)(n.code,{children:"GridTemplate"})," will get the ",(0,o.jsx)(n.code,{children:"className"})," with the value from\n",(0,o.jsx)(n.code,{children:"cssInJs.GridRowClass"}),'. This automatic lookup will happen for any of the "grid elements" when rendering with\n',(0,o.jsx)(n.code,{children:"GridTemplate"})," props. If multiple className values are present, for example:\n",(0,o.jsx)(n.code,{children:"{ className: 'GridRow GridColumn' }"}),", the classNames are split apart, looked up individually, and joined\ntogether to form one className with the values from ",(0,o.jsx)(n.code,{children:"cssInJs.GridRowClass"})," and ",(0,o.jsx)(n.code,{children:"cssInJs.GridColumnClass"}),". See the\n",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/usage/layout-grid#named-lookup-support-for-classname",children:"example"})," in the usage documentation."]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"ui-1",children:["ui",":col"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:col"})," grid element is used to specify the list of columns within a grid row. A ",(0,o.jsx)(n.code,{children:"ui:col"})," element can take on\nseveral forms:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"a simple list of dotted-path field names within the root field;"}),"\n",(0,o.jsxs)(n.li,{children:["a list of objects containing the dotted-path field ",(0,o.jsx)(n.code,{children:"name"})," any other props that are gathered into ",(0,o.jsx)(n.code,{children:"ui:options"})," for the field;"]}),"\n",(0,o.jsxs)(n.li,{children:["a list with a one-off ",(0,o.jsx)(n.code,{children:"render"})," functional component with or without a non-field ",(0,o.jsx)(n.code,{children:"name"})," identifier and any other to-be-spread props; and"]}),"\n",(0,o.jsxs)(n.li,{children:["an object with native ",(0,o.jsx)(n.code,{children:"GridTemplate"})," implementation specific props and a ",(0,o.jsx)(n.code,{children:"children"})," array with 1) or 2) or even a nested ",(0,o.jsx)(n.code,{children:"ui:row"})," or a ",(0,o.jsx)(n.code,{children:"ui:condition"})," containing a ",(0,o.jsx)(n.code,{children:"ui:row"})," (although this should be used carefully). E.g. (as JSON objects):"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Simple ",(0,o.jsx)(n.code,{children:"ui:col"})," definition, without additional ",(0,o.jsx)(n.code,{children:"GridTemplate"})," props and form 1 only children:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:col": ["innerField", "inner.grandChild", ...]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Complicated ",(0,o.jsx)(n.code,{children:"ui:col"})," definition, without additional ",(0,o.jsx)(n.code,{children:"GridTemplate"})," props and form 2 only children:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:col": [\n    { "name": "innerField", "fullWidth": true },\n    { "name": "inner.grandChild", "fullWidth": false },\n    ...\n  ]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["More complicated ",(0,o.jsx)(n.code,{children:"ui:col"})," definition, without additional ",(0,o.jsx)(n.code,{children:"GridTemplate"})," props and form 2 children, one being a\none-off ",(0,o.jsx)(n.code,{children:"render"})," functional component without a non-field ",(0,o.jsx)(n.code,{children:"name"})," identifier"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:col": [\n    "innerField",\n    {\n      "render": "WizardNavButton",\n      "isNext": true,\n      "size": "large"\n    }\n  ]\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Most complicated ",(0,o.jsx)(n.code,{children:"ui:col"})," definition, additional ",(0,o.jsx)(n.code,{children:"GridTemplate"})," props and form 1, 2 and 3 children (this example\nuses @mui/material/Grid2 native props):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:col": {\n    "size": { "md": 4 },\n    "className": "GridColumn",\n    "children": [\n      "innerField",\n      { "name": "inner.grandChild", "fullWidth": true },\n      { "name": "customRender", "render": "CustomRender", "toSpread": "prop-value" },\n      { "ui:row|ui:condition": ... },\n      ...\n    ]\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["NOTE: If a ",(0,o.jsx)(n.code,{children:"name"})," prop does not exist or its value does not match any field in a schema, then it is assumed to be a\ncustom ",(0,o.jsx)(n.code,{children:"render"})," component. If the ",(0,o.jsx)(n.code,{children:"render"})," prop does not exist, a null render will occur. If ",(0,o.jsx)(n.code,{children:"render"})," is a\nstring, its value will be looked up in the ",(0,o.jsx)(n.code,{children:"formContext.lookupMap"})," first before defaulting to a null render. If the\nresulting looked up ",(0,o.jsx)(n.code,{children:"render"})," is not a function (React components are functions), then it will be a null render."]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"ui-2",children:["ui",":columns"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:columns"})," grid element is syntactic sugar to specify a set of ",(0,o.jsx)(n.code,{children:"ui:col"})," columns that all share the same set of\nnative ",(0,o.jsx)(n.code,{children:"GridTemplate"})," props. In other words rather than writing the following configuration that renders a\n",(0,o.jsx)(n.code,{children:"<GridTemplate>"})," element with 3 ",(0,o.jsx)(n.code,{children:'<GridTemplate column className="GridColumn col-md-4">'})," nodes and 2\n",(0,o.jsx)(n.code,{children:'<GridTemplate column className="col-md-6">'})," nodes within it (one for each of the fields contained in the ",(0,o.jsx)(n.code,{children:"children"}),"\nlist):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:row": {\n    "children": [\n      {\n        "ui:col": {\n          "className": "GridColumn col-md-4",\n          "children": ["innerField"]\n        }\n      },\n      {\n        "ui:col": {\n          "className": "GridColumn col-md-4",\n          "children": ["inner.grandChild"]\n        }\n      },\n      {\n        "ui:col": {\n          "className": "GridColumn col-md-4",\n          "children": [{ "name": "inner.grandChild2" }]\n        }\n      },\n      {\n        "ui:col": {\n          "className": "col-md-6",\n          "children": ["innerField2"]\n        }\n      },\n      {\n        "ui:col": {\n          "className": "col-md-6",\n          "children": ["inner.grandChild3"]\n        }\n      }\n    ]\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"One can write this instead:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:row": {\n    "children": [\n      {\n        "ui:columns": {\n          "className": "GridColumn col-md-4",\n          "children": ["innerField", "inner.grandChild", { "name": "inner.grandChild2", "fullWidth": true }]\n        }\n      },\n      {\n        "ui:columns": {\n          "className": "col-md-6",\n          "children": ["innerField2", "inner.grandChild3"]\n        }\n      }\n    ]\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["NOTE: This syntax differs from ",(0,o.jsx)(n.code,{children:'"ui:col": { "className": "col-md-6", "children": ["innerField2", "inner.grandChild3"] }'})," in that\nthe ",(0,o.jsx)(n.code,{children:"ui:col"})," will render the two children fields inside a single ",(0,o.jsx)(n.code,{children:'<GridTemplate "className": "col-md-6",>'}),"\nelement."]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"ui-3",children:["ui",":condition"]}),"\n",(0,o.jsxs)(n.p,{children:["The final grid element, ",(0,o.jsx)(n.code,{children:"ui:condition"}),', allows for conditionally displaying "grid elements" within a row based on the\ncurrent value of a field as it relates to a (list of) hard-coded value(s). There are four elements that make up a\n',(0,o.jsx)(n.code,{children:"ui:condition"}),":"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["the dotted-path ",(0,o.jsx)(n.code,{children:"field"})," name within the root field that makes up the left-side of the condition;"]}),"\n",(0,o.jsxs)(n.li,{children:["the hard-coded ",(0,o.jsx)(n.code,{children:"value"})," (single or list) that makes up the right-side of the condition;"]}),"\n",(0,o.jsxs)(n.li,{children:["the ",(0,o.jsx)(n.code,{children:"operator"})," that controls how the left and right sides of the condition are compared; and"]}),"\n",(0,o.jsxs)(n.li,{children:["the ",(0,o.jsx)(n.code,{children:"children"}),' array that defines the "grid elements" to display if the condition passes.']}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"ui:condition"})," uses one of three ",(0,o.jsx)(n.code,{children:"operators"})," when deciding if a condition passes:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"all"})," operator will pass when the right-side and left-side contains all the same value(s);"]}),"\n",(0,o.jsxs)(n.li,{children:["the ",(0,o.jsx)(n.code,{children:"some"})," operator will pass when the right-side and left-side contain as least one value in common;"]}),"\n",(0,o.jsxs)(n.li,{children:["the ",(0,o.jsx)(n.code,{children:"none"})," operator will pass when the right-side and left-side do not contain any values in common. E.g. (as JSON objects):"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Here is how to render an if-then-else for ",(0,o.jsx)(n.code,{children:"field2"})," which is an enum that has 3 known values and supports allowing\nany other value:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:row": [\n    {\n      "ui:condition": {\n        "field": "field2",\n        "operator": "all",\n        "value": "value1",\n        "children": [\n          { "ui:row": [...] }\n        ],\n      }\n    },\n    {\n      "ui:condition": {\n        "field": "field2",\n        "operator": "some",\n        "value": ["value2", "value3"],\n        "children": [\n          { "ui:row": [...] }\n        ],\n      }\n    },\n    {\n      "ui:condition": {\n        "field": "field2",\n        "operator": "none",\n        "value": ["value1", "value2", "value3"],\n        "children": [\n          { "ui:row": [...] }\n        ]\n      }\n    }\n  ]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}}}]);