"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[5031],{1184:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>d});var o=s(4041);const n={},i=o.createContext(n);function t(e){const r=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),o.createElement(i.Provider,{value:r},e.children)}},8457:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"migration-guides/v3.x upgrade guide","title":"3.x Upgrade Guide","description":"Breaking changes","source":"@site/docs/migration-guides/v3.x upgrade guide.md","sourceDirName":"migration-guides","slug":"/migration-guides/v3.x upgrade guide","permalink":"/react-jsonschema-form/docs/migration-guides/v3.x upgrade guide","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/migration-guides/v3.x upgrade guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"2.x Upgrade Guide","permalink":"/react-jsonschema-form/docs/migration-guides/v2.x upgrade guide"},"next":{"title":"4.x Upgrade Guide","permalink":"/react-jsonschema-form/docs/migration-guides/v4.x upgrade guide"}}');var n=s(1085),i=s(1184);const t={},d="3.x Upgrade Guide",a={},c=[{value:"Breaking changes",id:"breaking-changes",level:2},{value:"Node support",id:"node-support",level:3},{value:"Dereferenced schemas for <code>anyOf</code>/<code>allOf</code> options",id:"dereferenced-schemas-for-anyofallof-options",level:3},{value:"Help field IDs",id:"help-field-ids",level:3},{value:"Bring your own polyfills",id:"bring-your-own-polyfills",level:3}];function l(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"3x-upgrade-guide",children:"3.x Upgrade Guide"})}),"\n",(0,n.jsx)(r.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,n.jsx)(r.h3,{id:"node-support",children:"Node support"}),"\n",(0,n.jsx)(r.p,{children:"Dropped support for Node 8, 9, 10. Minimum supported version of Node.js is now 12."}),"\n",(0,n.jsxs)(r.h3,{id:"dereferenced-schemas-for-anyofallof-options",children:["Dereferenced schemas for ",(0,n.jsx)(r.code,{children:"anyOf"}),"/",(0,n.jsx)(r.code,{children:"allOf"})," options"]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"MultiSchemaField"}),"'s ",(0,n.jsx)(r.code,{children:"options"})," interface is different. Before, an option could include a ",(0,n.jsx)(r.code,{children:"$ref"}),". Now, any option with a reference will be resolved/dereferenced when given as props for ",(0,n.jsx)(r.code,{children:"MultiSchemaField"}),"."]}),"\n",(0,n.jsx)(r.h3,{id:"help-field-ids",children:"Help field IDs"}),"\n",(0,n.jsxs)(r.p,{children:["IDs for ",(0,n.jsx)(r.a,{href:"/react-jsonschema-form/docs/api-reference/uiSchema#help",children:"Help fields"})," are now suffixed by ",(0,n.jsx)(r.code,{children:"__help"})," so that the IDs are unique. Previously, their IDs would be nonexistent or the same as the fields that they were describing."]}),"\n",(0,n.jsx)(r.h3,{id:"bring-your-own-polyfills",children:"Bring your own polyfills"}),"\n",(0,n.jsxs)(r.p,{children:["core-js@2 has been removed from @rjsf/core. See more about ",(0,n.jsx)(r.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/pull/2211#issue-563700810",children:"the rationale here"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["If you're using a framework like ",(0,n.jsx)(r.a,{href:"https://create-react-app.dev/docs/supported-browsers-features#supported-browsers",children:"Create React App"}),", ",(0,n.jsx)(r.a,{href:"https://www.gatsbyjs.com/docs/how-to/custom-configuration/browser-support/",children:"Gatsby"}),", ",(0,n.jsx)(r.a,{href:"https://nextjs.org/docs/basic-features/supported-browsers-features",children:"Next.js"}),", or transpiling code through something like ",(0,n.jsx)(r.code,{children:"@babel/preset-env"}),", polyfills are already included there and you won't have to do anything."]}),"\n",(0,n.jsxs)(r.p,{children:["If you were directly depending on @rjsf/core's @babel/runtime pulling in core-js@2, just ",(0,n.jsx)(r.code,{children:"npm install core-js"})," and using a side effectful import at the top of your entry point (",(0,n.jsx)(r.code,{children:"import 'core-js'"}),") might be enough."]}),"\n",(0,n.jsxs)(r.p,{children:["For a slightly more elaborate setup, ",(0,n.jsx)(r.a,{href:"https://babeljs.io/docs/en/babel-preset-env#how-does-it-work",children:"@babel/preset-env"})," is probably a good second choice."]}),"\n",(0,n.jsxs)(r.p,{children:["From ",(0,n.jsx)(r.code,{children:"@babel/preset-env"}),"'s docs"]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:["We leverage [",(0,n.jsx)(r.code,{children:"browserslist"}),", ",(0,n.jsx)(r.code,{children:"compat-table"}),", and ",(0,n.jsx)(r.code,{children:"electron-to-chromium"}),"] to maintain mappings of which version of our supported target environments gained support of a JavaScript syntax or browser feature, as well as a mapping of those syntaxes and features to Babel transform plugins and core-js polyfills."]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);