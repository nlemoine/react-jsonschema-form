"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[4586],{1184:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var s=r(4041);const o={},i=s.createContext(o);function t(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(i.Provider,{value:n},e.children)}},9809:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"migration-guides/v5.x upgrade guide","title":"5.x Upgrade Guide","description":"Breaking changes","source":"@site/versioned_docs/version-5.24.10/migration-guides/v5.x upgrade guide.md","sourceDirName":"migration-guides","slug":"/migration-guides/v5.x upgrade guide","permalink":"/react-jsonschema-form/docs/version-5.24.10/migration-guides/v5.x upgrade guide","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-5.24.10/migration-guides/v5.x upgrade guide.md","tags":[],"version":"5.24.10","frontMatter":{},"sidebar":"docs","previous":{"title":"4.x Upgrade Guide","permalink":"/react-jsonschema-form/docs/version-5.24.10/migration-guides/v4.x upgrade guide"},"next":{"title":"Usage and Customization","permalink":"/react-jsonschema-form/docs/version-5.24.10/usage/"}}');var o=r(1085),i=r(1184);const t={},d="5.x Upgrade Guide",a={},c=[{value:"Breaking changes",id:"breaking-changes",level:2},{value:"Node support",id:"node-support",level:3},{value:"React version",id:"react-version",level:3},{value:"New packages",id:"new-packages",level:3},{value:"<code>id</code> BREAKING CHANGES",id:"id-breaking-changes",level:3},{value:"<code>enumOptions[]</code> widgets BREAKING CHANGES",id:"enumoptions-widgets-breaking-changes",level:3},{value:"<code>@rjsf/core</code> BREAKING CHANGES",id:"rjsfcore-breaking-changes",level:3},{value:"Types",id:"types",level:4},{value:"Form props",id:"form-props",level:4},{value:"<code>formElement</code> converted to RefObject",id:"formelement-converted-to-refobject",level:5},{value:"<code>validate</code> prop renamed",id:"validate-prop-renamed",level:5},{value:"<code>fields</code> prop changes",id:"fields-prop-changes",level:5},{value:"new <code>templates</code> prop",id:"new-templates-prop",level:5},{value:"<code>widgets</code> prop change",id:"widgets-prop-change",level:5},{value:"utils.js",id:"utilsjs",level:4},{value:"validator.js",id:"validatorjs",level:4},{value:"toErrorList param changed",id:"toerrorlist-param-changed",level:5},{value:"Custom validation and extraErrors",id:"custom-validation-and-extraerrors",level:5},{value:"Generate correct ids when arrays are combined with <code>anyOf</code>/<code>oneOf</code>",id:"generate-correct-ids-when-arrays-are-combined-with-anyofoneof",level:4},{value:"Deprecations added in v5",id:"deprecations-added-in-v5",level:4},{value:"getMatchingOption()",id:"getmatchingoption",level:5},{value:"Non-standard <code>enumNames</code> property",id:"non-standard-enumnames-property",level:5},{value:"uiSchema.classNames",id:"uischemaclassnames",level:5},{value:"<code>@rjsf/material-ui</code> BREAKING CHANGES",id:"rjsfmaterial-ui-breaking-changes",level:3},{value:"Migrating for Material UI version 4",id:"migrating-for-material-ui-version-4",level:4},{value:"Migrating for Material UI version 5",id:"migrating-for-material-ui-version-5",level:4},{value:"Before",id:"before",level:5},{value:"After",id:"after",level:5}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"5x-upgrade-guide",children:"5.x Upgrade Guide"})}),"\n",(0,o.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,o.jsxs)(n.p,{children:["There were several significant ",(0,o.jsx)(n.strong,{children:"breaking changes"})," in RJSF version 5 that were necessary in order to support the following new features:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Schema validation was decoupled from ",(0,o.jsx)(n.code,{children:"@rjsf/core"})," to resolve issue ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2693",children:"#2693"}),". Additionally, in order to break a circular dependency in the validation refactor, the ",(0,o.jsx)(n.code,{children:"@rjsf/core/utils.js"})," file was split out into its own ",(0,o.jsx)(n.code,{children:"@rjsf/utils"})," package as was suggested in ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/1655",children:"#1655"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["The theme for Material UI version 5 (i.e. ",(0,o.jsx)(n.code,{children:"@rjsf/mui"}),") was split out of the theme for version 4 (i.e. ",(0,o.jsx)(n.code,{children:"@rjsf/material-ui"}),") to resolve the following issues: ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2762",children:"#2762"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2858",children:"#2858"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2905",children:"#2905"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2945",children:"#2945"})]}),"\n",(0,o.jsxs)(n.li,{children:["As part of the fix for ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2526",children:"#2526"})," all the existing templates in the previous version were moved into a new ",(0,o.jsx)(n.code,{children:"templates"})," dictionary, similar to how ",(0,o.jsx)(n.code,{children:"widgets"})," and ",(0,o.jsx)(n.code,{children:"fields"})," work. This ",(0,o.jsx)(n.code,{children:"templates"})," dictionary was added to the ",(0,o.jsx)(n.code,{children:"Registry"})," and also the ",(0,o.jsx)(n.code,{children:"Form"})," props, replacing the ",(0,o.jsx)(n.code,{children:"ArrayFieldTemplate"}),", ",(0,o.jsx)(n.code,{children:"FieldTemplate"}),", ",(0,o.jsx)(n.code,{children:"ObjectFieldTemplate"})," and ",(0,o.jsx)(n.code,{children:"ErrorList"})," props. In addition, several of the ",(0,o.jsx)(n.code,{children:"fields"})," and ",(0,o.jsx)(n.code,{children:"widgets"})," based components were moved into the ",(0,o.jsx)(n.code,{children:"templates"})," dictionary as they were more like templates than true ",(0,o.jsx)(n.code,{children:"Field"}),"s or ",(0,o.jsx)(n.code,{children:"Widget"}),"s. Also fixes ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2945",children:"#2945"})]}),"\n",(0,o.jsxs)(n.li,{children:["Fixed ",(0,o.jsx)(n.code,{children:"anyOf"})," and ",(0,o.jsx)(n.code,{children:"oneOf"})," getting incorrect, potentially duplicate ids when combined with array ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2197",children:"#2197"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CheckboxesWidget"}),", ",(0,o.jsx)(n.code,{children:"RadioWidget"})," and ",(0,o.jsx)(n.code,{children:"SelectWidget"})," in all themes now use indexes into ",(0,o.jsx)(n.code,{children:"enumOptions[]"})," rather than ",(0,o.jsx)(n.code,{children:"option.value"})," to allow for objects in ",(0,o.jsx)(n.code,{children:"enumOptions"})," - ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/1494",children:"#1494"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"node-support",children:"Node support"}),"\n",(0,o.jsxs)(n.p,{children:["Version 5 is dropping official support for Node 12 as it is no longer a ",(0,o.jsx)(n.a,{href:"https://nodejs.org/en/about/releases/",children:"maintained version"}),".\nPlease use Node 18 when making any changes to ",(0,o.jsx)(n.code,{children:"package.json"})," and ",(0,o.jsx)(n.code,{children:"package-lock.json"})," files.\nAll PR and branch builds are running against Node 14, 16 and 18."]}),"\n",(0,o.jsx)(n.h3,{id:"react-version",children:"React version"}),"\n",(0,o.jsx)(n.p,{children:"RJSF is no longer actively supporting React version < 16.14.x.\nReact 17 is officially supported on all the themes where the underlying theme library also supports React 17."}),"\n",(0,o.jsx)(n.p,{children:"Unfortunately, there is required work pending to properly support React 18, so use it at your own risk."}),"\n",(0,o.jsx)(n.h3,{id:"new-packages",children:"New packages"}),"\n",(0,o.jsx)(n.p,{children:"There are four new packages added in RJSF version 5:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@rjsf/utils"}),": All of the ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-5.24.10/api-reference/utility-functions",children:"utility functions"})," previously imported from ",(0,o.jsx)(n.code,{children:"@rjsf/core/utils"})," as well as the Typescript types for RJSF version 5.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The following new utility functions were added: ",(0,o.jsx)(n.code,{children:"ariaDescribedByIds()"}),", ",(0,o.jsx)(n.code,{children:"createSchemaUtils()"}),", ",(0,o.jsx)(n.code,{children:"descriptionId()"}),", ",(0,o.jsx)(n.code,{children:"enumOptionsDeselectValue()"}),", ",(0,o.jsx)(n.code,{children:"enumOptionsIndexForValue()"}),", ",(0,o.jsx)(n.code,{children:"enumOptionsIsSelected()"}),", ",(0,o.jsx)(n.code,{children:"enumOptionsSelectValue()"}),", ",(0,o.jsx)(n.code,{children:"enumOptionsValueForIndex()"}),", ",(0,o.jsx)(n.code,{children:"errorId()"}),", ",(0,o.jsx)(n.code,{children:"examplesId()"}),", ",(0,o.jsx)(n.code,{children:"getClosestMatchingOption()"}),", ",(0,o.jsx)(n.code,{children:"getFirstMatchingOption()"}),", ",(0,o.jsx)(n.code,{children:"getInputProps()"}),", ",(0,o.jsx)(n.code,{children:"helpId()"}),", ",(0,o.jsx)(n.code,{children:"mergeValidationData()"}),", ",(0,o.jsx)(n.code,{children:"optionId()"}),", ",(0,o.jsx)(n.code,{children:"sanitizeDataForNewSchema()"})," and ",(0,o.jsx)(n.code,{children:"titleId()"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@rjsf/validator-ajv6"}),": The ",(0,o.jsx)(n.a,{href:"https://github.com/ajv-validator/ajv",children:"ajv"}),"-v6-based validator refactored out of ",(0,o.jsx)(n.code,{children:"@rjsf/core@4.x"}),", that implements the ",(0,o.jsx)(n.code,{children:"ValidatorType"})," interface defined in ",(0,o.jsx)(n.code,{children:"@rjsf/utils"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@rjsf/validator-ajv8"}),": The ",(0,o.jsx)(n.a,{href:"https://github.com/ajv-validator/ajv",children:"ajv"}),"-v8-based validator that is an upgrade of the ",(0,o.jsx)(n.code,{children:"@rjsf/validator-ajv6"}),", that implements the ",(0,o.jsx)(n.code,{children:"ValidatorType"})," interface defined in ",(0,o.jsx)(n.code,{children:"@rjsf/utils"}),". See the ajv 6 to 8 ",(0,o.jsx)(n.a,{href:"https://ajv.js.org/v6-to-v8-migration.html",children:"migration guide"})," for more information."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@rjsf/mui"}),": Previously ",(0,o.jsx)(n.code,{children:"@rjsf/material-ui/v5"}),", now provided as its own theme."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"id-breaking-changes",children:[(0,o.jsx)(n.code,{children:"id"})," BREAKING CHANGES"]}),"\n",(0,o.jsxs)(n.p,{children:["In many of the themes the ",(0,o.jsx)(n.code,{children:"id"}),"s for the ",(0,o.jsx)(n.code,{children:"Title"}),", ",(0,o.jsx)(n.code,{children:"Description"})," and ",(0,o.jsx)(n.code,{children:"Examples"})," blocks were update to all have a consistent value of ",(0,o.jsx)(n.code,{children:"xxx__title"}),", ",(0,o.jsx)(n.code,{children:"xxx__description"})," and ",(0,o.jsx)(n.code,{children:"xxx__examples"}),", respectively, where ",(0,o.jsx)(n.code,{children:"xxx"})," is the id of the field.\nIn addition, some of the ",(0,o.jsx)(n.code,{children:"id"}),"s for various input values were updated to be consistent across themes or to fix small bugs.\nFor instance, the values for radio buttons in the ",(0,o.jsx)(n.code,{children:"RadioWidget"})," and checkboxes in the ",(0,o.jsx)(n.code,{children:"CheckboxesWidget"})," are of the form ",(0,o.jsx)(n.code,{children:"xxx-${option.value}"}),", where ",(0,o.jsx)(n.code,{children:"xxx"})," is the id of the field."]}),"\n",(0,o.jsxs)(n.h3,{id:"enumoptions-widgets-breaking-changes",children:[(0,o.jsx)(n.code,{children:"enumOptions[]"})," widgets BREAKING CHANGES"]}),"\n",(0,o.jsxs)(n.p,{children:["Schemas may have ",(0,o.jsx)(n.code,{children:"enumOptions[]"})," where values are objects rather than primitive types. Examples of such schemas have been added to the playground. These schemas did not work in RJSF prior to v5.\nIn every theme, the ",(0,o.jsx)(n.code,{children:"enumOptions[]"})," rendering widgets ",(0,o.jsx)(n.code,{children:"CheckboxesWidget"}),", ",(0,o.jsx)(n.code,{children:"RadioWidget"})," and ",(0,o.jsx)(n.code,{children:"SelectWidget"})," previously used the ",(0,o.jsx)(n.code,{children:"enumOptions[].value"})," to as the value used for the underlying ",(0,o.jsx)(n.code,{children:"checkbox"}),", ",(0,o.jsx)(n.code,{children:"radio"})," and ",(0,o.jsx)(n.code,{children:"select.option"})," elements.\nNow, these ",(0,o.jsx)(n.code,{children:"CheckboxesWidget"}),", ",(0,o.jsx)(n.code,{children:"RadioWidget"})," and ",(0,o.jsx)(n.code,{children:"SelectWidget"})," components use the index of the ",(0,o.jsx)(n.code,{children:"enumOptions[]"})," in the list as the value for the underlying elements.\nIf you need to build a custom widget for this kind of ",(0,o.jsx)(n.code,{children:"enumOptions"}),", there are a set of ",(0,o.jsx)(n.code,{children:"enumOptionsXXX"})," functions in ",(0,o.jsx)(n.code,{children:"@rjsf/utils"})," to support your implementation."]}),"\n",(0,o.jsxs)(n.h3,{id:"rjsfcore-breaking-changes",children:[(0,o.jsx)(n.code,{children:"@rjsf/core"})," BREAKING CHANGES"]}),"\n",(0,o.jsx)(n.h4,{id:"types",children:"Types"}),"\n",(0,o.jsxs)(n.p,{children:["In version 4, RJSF exported all its types directly from ",(0,o.jsx)(n.code,{children:"@rjsf/core"}),".\nIn version 5, only the types for the ",(0,o.jsx)(n.code,{children:"Form"})," component and the ",(0,o.jsx)(n.code,{children:"withTheme()"})," HOC are exported directly from ",(0,o.jsx)(n.code,{children:"@rjsf/core"}),".\nAll the rest of the types for RJSF are now exported from the new ",(0,o.jsx)(n.code,{children:"@rjsf/utils"})," package."]}),"\n",(0,o.jsxs)(n.p,{children:["NOTE: The types in ",(0,o.jsx)(n.code,{children:"@rjsf/utils"})," have been improved significantly from those in version 4 and as a result may require you to fix your Typescript typings and add some casts."]}),"\n",(0,o.jsx)(n.p,{children:"Some of the most notable changes are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"RJSFSchema"})," has replaced the use of ",(0,o.jsx)(n.code,{children:"JSON7Schema"})," for future compatibility reasons."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Currently ",(0,o.jsx)(n.code,{children:"RJSFSchema"})," is simply an alias to ",(0,o.jsx)(n.code,{children:"JSON7Schema"})," so this change is purely a naming one."]}),"\n",(0,o.jsxs)(n.li,{children:["It is highly recommended to update your use of ",(0,o.jsx)(n.code,{children:"JSON7Schema"})," with ",(0,o.jsx)(n.code,{children:"RJSFSchema"})," so that when the RJSF begins supporting a newer JSON Schema version out-of-the-box, your code won't be affected."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"RJSFSchemaDefinition"})," has replaced the use of ",(0,o.jsx)(n.code,{children:"JSONSchema7Definition"})," for the same reasons."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The use of the generic ",(0,o.jsx)(n.code,{children:"T"})," (defaulting to ",(0,o.jsx)(n.code,{children:"any"}),") for the ",(0,o.jsx)(n.code,{children:"formData"})," type has been expanded to cover all type hierarchies that use ",(0,o.jsx)(n.code,{children:"formData"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"StrictRJSFSchema"})," and ",(0,o.jsx)(n.code,{children:"RJSFSchema"})," have replaced the use of ",(0,o.jsx)(n.code,{children:"JSON7Schema"})," for future compatibility reasons."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"RJSFSchema"})," is ",(0,o.jsx)(n.code,{children:"StrictRJSFSchema"})," joined with the ",(0,o.jsx)(n.code,{children:"GenericObjectType"})," (i.e. ",(0,o.jsx)(n.code,{children:"{ [key: string]: any }"}),") to allow for additional syntax related to newer draft versions"]}),"\n",(0,o.jsxs)(n.li,{children:["All definitions of ",(0,o.jsx)(n.code,{children:"schema"})," and ",(0,o.jsx)(n.code,{children:"rootSchema"})," elements have been replaced with a generic that is defined as ",(0,o.jsx)(n.code,{children:"S extends StrictRJSFSchema = RJSFSchema"})]}),"\n",(0,o.jsxs)(n.li,{children:["It is highly recommended to update your use of ",(0,o.jsx)(n.code,{children:"JSON7Schema"})," with ",(0,o.jsx)(n.code,{children:"RJSFSchema"})," since that is the default for the new generic used for ",(0,o.jsx)(n.code,{children:"schema"})," and ",(0,o.jsx)(n.code,{children:"rootSchema"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["A new generic ",(0,o.jsx)(n.code,{children:"F"})," (extending ",(0,o.jsx)(n.code,{children:"FormContextType"})," defaulting to ",(0,o.jsx)(n.code,{children:"any"}),") was added for the ",(0,o.jsx)(n.code,{children:"formContext"})," type, and all types in the hierarchy that use ",(0,o.jsx)(n.code,{children:"formContext"})," have had that generic added to them."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The new ",(0,o.jsx)(n.code,{children:"CustomValidator"}),", ",(0,o.jsx)(n.code,{children:"ErrorTransformer"}),", ",(0,o.jsx)(n.code,{children:"ValidationData"}),", ",(0,o.jsx)(n.code,{children:"ValidatorType"})," and ",(0,o.jsx)(n.code,{children:"SchemaUtilsType"})," types were added to support the decoupling of the validation implementation."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The new ",(0,o.jsx)(n.code,{children:"TemplatesType"}),", ",(0,o.jsx)(n.code,{children:"ArrayFieldDescriptionProps"}),", ",(0,o.jsx)(n.code,{children:"ArrayFieldTitleProps"}),", ",(0,o.jsx)(n.code,{children:"UnsupportedFieldProps"}),", ",(0,o.jsx)(n.code,{children:"IconButtonProps"}),", ",(0,o.jsx)(n.code,{children:"SubmitButtonProps"})," and ",(0,o.jsx)(n.code,{children:"UIOptionsBaseType"})," were added to support the consolidation (and expansion) of ",(0,o.jsx)(n.code,{children:"templates"})," in the ",(0,o.jsx)(n.code,{children:"Registry"})," and ",(0,o.jsx)(n.code,{children:"Form"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"BREAKING CHANGE"})," The ",(0,o.jsx)(n.code,{children:"DescriptionField"})," and ",(0,o.jsx)(n.code,{children:"TitleField"})," props were removed from the ",(0,o.jsx)(n.code,{children:"ArrayFieldTemplateProps"})," and ",(0,o.jsx)(n.code,{children:"ObjectFieldTemplateProps"})," as they can now be derived from the ",(0,o.jsx)(n.code,{children:"templates"})," or ",(0,o.jsx)(n.code,{children:"uiSchema"})," via the new ",(0,o.jsx)(n.code,{children:"getTemplate()"})," utility function."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"BREAKING CHANGE"})," The ",(0,o.jsx)(n.code,{children:"fields"})," prop was removed from the ",(0,o.jsx)(n.code,{children:"FieldTemplateProps"})," as you can simply use ",(0,o.jsx)(n.code,{children:"registry.fields"})," instead."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"BREAKING CHANGE"})," The ",(0,o.jsx)(n.code,{children:"showErrorList"})," prop was changed to accept ",(0,o.jsx)(n.code,{children:"false"}),", ",(0,o.jsx)(n.code,{children:'"top"'})," or ",(0,o.jsx)(n.code,{children:'"bottom"'}),". ",(0,o.jsx)(n.code,{children:"true"})," is no longer a valid value. The default value is ",(0,o.jsx)(n.code,{children:'"top"'}),", which has identical behavior to the default value/",(0,o.jsx)(n.code,{children:"true"})," in v4.\nYou can view all these ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/utils/src/types.ts",children:"types"})," on GitHub."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"form-props",children:"Form props"}),"\n",(0,o.jsxs)(n.p,{children:["In version 5, the ",(0,o.jsx)(n.code,{children:"Form"})," component's two optional props ",(0,o.jsx)(n.code,{children:"additionalMetaSchemas"})," and ",(0,o.jsx)(n.code,{children:"customFormats"})," were replaced with the new, required ",(0,o.jsx)(n.code,{children:"validator"})," prop, in order to support the decoupling of the validation implementation.\nThis new ",(0,o.jsx)(n.code,{children:"validator"})," prop is expected to be an implementation of the ",(0,o.jsx)(n.code,{children:"ValidatorType"})," interface.\nThe new ",(0,o.jsx)(n.code,{children:"@rjsf/validator-ajv6"})," package contains the refactored implementation of the version 4 validator; It was provided for backwards compatibility with RJSF v4, and it is deprecated.",(0,o.jsx)(n.br,{}),"\n","The new ",(0,o.jsx)(n.code,{children:"@rjsf/validator-ajv8"})," package contains the refactored implementation of the version 4 validator, that has been converted to use the ",(0,o.jsx)(n.code,{children:"Ajv 8"})," validator and has more capabilities than the ",(0,o.jsx)(n.code,{children:"Ajv 6"})," one. See the ",(0,o.jsx)(n.a,{href:"https://ajv.js.org/v6-to-v8-migration.html",children:"Ajv migration guide"})," for more information."]}),"\n",(0,o.jsxs)(n.p,{children:["There are two ways to use this new package to provide a ",(0,o.jsx)(n.code,{children:"validator"})," for a ",(0,o.jsx)(n.code,{children:"Form"}),".\nFirst, you can simply import the default validator from the package and pass it to a ",(0,o.jsx)(n.code,{children:"Form"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { RJSFSchema } from "@rjsf/utils";\nimport Form from "@rjsf/core";\nimport validator from "@rjsf/validator-ajv8";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Second, if you were actually providing one (or both) of the removed optional props to your ",(0,o.jsx)(n.code,{children:"Form"}),", you can continue using them by creating a customized validator."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { RJSFSchema } from "@rjsf/utils";\nimport Form from "@rjsf/core";\nimport { customizeValidator, CustomValidatorOptionsType } from "@rjsf/validator-ajv8";\n\n// Your schema, additionalMetaSchemas and/or customFormats\nconst schema: RJSFSchema = { ... };\nconst additionalMetaSchemas: CustomValidatorOptionsType[\'additionalMetaSchemas\'] = [{ ... }];\nconst customFormats: CustomValidatorOptionsType[\'customFormats\'] = { ... };\n\nconst validator = customizeValidator({ additionalMetaSchemas, customFormats });\n\nrender((\n  <Form schema={schema} validator={validator} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsxs)(n.h5,{id:"formelement-converted-to-refobject",children:[(0,o.jsx)(n.code,{children:"formElement"})," converted to RefObject"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"formElement"})," variable that stored the ref to the inner ",(0,o.jsx)(n.code,{children:"<form />"})," was converted from a simple variable assigned via a ",(0,o.jsx)(n.a,{href:"https://reactjs.org/docs/refs-and-the-dom.html#callback-refs",children:"callback ref"})," (ala React < 16.3) to a React.RefObject created using the ",(0,o.jsx)(n.code,{children:"React.createRef()"})," API.\nAs a result, if you were using the ",(0,o.jsx)(n.code,{children:"formElement"})," ref, you will need to update it to use ",(0,o.jsx)(n.code,{children:"formElement.current"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { RJSFSchema } from "@rjsf/utils";\nimport Form from "@rjsf/core";\nimport validator from "@rjsf/validator-ajv8";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\nconst formRef = React.createRef();\n\nrender((\n  <Form ref={formRef} schema={schema} validator={validator} />\n), document.getElementById("app"));\n\n...\n// Previously, to reset the form one would have called:\n//   formRef.current.formElement.reset();\n// Now one calls:\nformRef.current.formElement.current.reset();\n'})}),"\n",(0,o.jsxs)(n.h5,{id:"validate-prop-renamed",children:[(0,o.jsx)(n.code,{children:"validate"})," prop renamed"]}),"\n",(0,o.jsxs)(n.p,{children:["Additionally, in version 5, the ",(0,o.jsx)(n.code,{children:"validate"})," prop on ",(0,o.jsx)(n.code,{children:"Form"})," was renamed to ",(0,o.jsx)(n.code,{children:"customValidate"})," to avoid confusion with the new ",(0,o.jsx)(n.code,{children:"validator"})," prop."]}),"\n",(0,o.jsxs)(n.h5,{id:"fields-prop-changes",children:[(0,o.jsx)(n.code,{children:"fields"})," prop changes"]}),"\n",(0,o.jsxs)(n.p,{children:["In previous versions, it was possible to provide an override to the ",(0,o.jsx)(n.code,{children:"DescriptionField"}),", ",(0,o.jsx)(n.code,{children:"TitleField"})," and/or ",(0,o.jsx)(n.code,{children:"UnsupportedField"})," components by providing a custom implementation in the ",(0,o.jsx)(n.code,{children:"fields"})," prop on the ",(0,o.jsx)(n.code,{children:"Form"}),".\nSince these components do not actually support the ",(0,o.jsx)(n.code,{children:"FieldProps"})," interface, they were moved into the ",(0,o.jsx)(n.code,{children:"templates"})," dictionary instead.\nIf you were previously overriding any (or all) of these components, you can override them now via the ",(0,o.jsx)(n.code,{children:"templates"})," prop on ",(0,o.jsx)(n.code,{children:"Form"})," instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { DescriptionFieldProps, RJSFSchema, TitleFieldProps } from "@rjsf/utils";\nimport Form from "@rjsf/core";\nimport validator from "@rjsf/validator-ajv8";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\n// Your custom fields\nconst CustomDescriptionField = (props: DescriptionFieldProps) => { ... };\nconst CustomTitleField = (props: TitleFieldProps) => { ... };\nconst CustomUnsupportedField = (props: ObjectFieldTemplateProps) => { ...\n};\n\nconst templates: Partial<TemplatesType> = {\n  DescriptionFieldTemplate: CustomDescriptionField,\n  TitleFieldTemplate: CustomTitleField,\n  UnsupportedFieldTemplate: CustomUnsupportedField,\n};\n\nrender((\n  <Form schema={schema} validator={validator} templates={templates}/>\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsxs)(n.h5,{id:"new-templates-prop",children:["new ",(0,o.jsx)(n.code,{children:"templates"})," prop"]}),"\n",(0,o.jsxs)(n.p,{children:["Additionally, in version 5, the ",(0,o.jsx)(n.code,{children:"ArrayFieldTemplate"}),", ",(0,o.jsx)(n.code,{children:"FieldTemplate"}),", ",(0,o.jsx)(n.code,{children:"ObjectFieldTemplate"})," and ",(0,o.jsx)(n.code,{children:"ErrorList"})," props were replaced with the ",(0,o.jsx)(n.code,{children:"templates"})," prop as part of the ",(0,o.jsx)(n.code,{children:"TemplatesType"})," consolidation.\nIf you were previously overriding any (or all) of these templates, you can simply consolidate them into the new ",(0,o.jsx)(n.code,{children:"templates"})," prop on ",(0,o.jsx)(n.code,{children:"Form"})," instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { ArrayFieldTemplateProps, ErrorListProps, FieldTemplateProps, ObjectFieldTemplateProps, RJSFSchema } from "@rjsf/utils";\nimport Form from "@rjsf/core";\nimport validator from "@rjsf/validator-ajv8";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\n// Your custom templates\nconst CustomArrayFieldTemplate = (props: ArrayFieldTemplateProps) => { ... };\nconst CustomFieldTemplate = (props: FieldTemplateProps) => { ... };\nconst CustomObjectFieldTemplate = (props: ObjectFieldTemplateProps) => { ... };\nconst CustomErrorField = (props: ErrorListProps) => { ... };\n\nconst templates: Partial<TemplatesType> = {\n  ArrayFieldTemplate: CustomArrayFieldTemplate,\n  FieldTemplate: CustomFieldTemplate,\n  ObjectFieldTemplate: CustomObjectFieldTemplate,\n  ErrorFieldTemplate: CustomErrorField,\n};\n\nrender((\n  <Form schema={schema} validator={validator} templates={templates} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["NOTE: In version 5, the ",(0,o.jsx)(n.code,{children:"ArrayField"})," implementation was refactored to add 3 additional templates for presenting arrays along with the ",(0,o.jsx)(n.code,{children:"ArrayFieldTemplate"}),".\nIf you were updating the ",(0,o.jsx)(n.code,{children:"ArrayFieldTemplate"})," to modify just a subset of the UI, it may be easier for you to implement one of the other new templates instead.\nSee the ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-5.24.10/advanced-customization/custom-templates",children:"Custom Templates"})," documentation for more details."]}),"\n",(0,o.jsxs)(n.h5,{id:"widgets-prop-change",children:[(0,o.jsx)(n.code,{children:"widgets"})," prop change"]}),"\n",(0,o.jsxs)(n.p,{children:["In the previous version, it was possible to provide an override to the ",(0,o.jsx)(n.code,{children:"SubmitButton"})," component by providing a custom implementation in the ",(0,o.jsx)(n.code,{children:"widgets"})," prop on the ",(0,o.jsx)(n.code,{children:"Form"}),".\nSince this component only requires a tiny fraction of the ",(0,o.jsx)(n.code,{children:"WidgetProps"})," interface, it was moved into the ",(0,o.jsx)(n.code,{children:"templates.ButtonTemplates"})," dictionary instead with its own, reduced set of props.\nIf you were previously overriding this component, you can override it now via the ",(0,o.jsx)(n.code,{children:"templates"})," prop on ",(0,o.jsx)(n.code,{children:"Form"})," instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { RJSFSchema, SubmitButtonProps } from "@rjsf/utils";\nimport Form from "@rjsf/core";\nimport validator from "@rjsf/validator-ajv8";\n\n// Your schema\nconst schema: RJSFSchema = { ... };\n\n// Your custom button\nconst CustomSubmitButton = (props: SubmitButtonProps) => { ...\n};\n\nconst templates: Partial<TemplatesType> = {\n  ButtonTemplates: {\n    SubmitButton: CustomSubmitButton,\n  }\n};\n\nrender((\n  <Form schema={schema} validator={validator} templates={templates}/>\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsx)(n.h4,{id:"utilsjs",children:"utils.js"}),"\n",(0,o.jsxs)(n.p,{children:["In version 5, all the utility functions that were previously accessed via ",(0,o.jsx)(n.code,{children:"import { utils } from '@rjsf/core';"})," are now available via ",(0,o.jsx)(n.code,{children:"import utils from '@rjsf/utils';"}),".\nBecause of the decoupling of validation from ",(0,o.jsx)(n.code,{children:"@rjsf/core"})," there is a breaking change for all the ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-5.24.10/api-reference/utility-functions#validator-based-utility-functions",children:"validator-based utility functions"}),", since they now require an additional ",(0,o.jsx)(n.code,{children:"ValidatorType"})," parameter.\nMore over, one previously exported function ",(0,o.jsx)(n.code,{children:"resolveSchema()"})," is no longer exposed in the ",(0,o.jsx)(n.code,{children:"@rjsf/utils"}),", so use ",(0,o.jsx)(n.code,{children:"retrieveSchema()"})," instead.\nFinally, the function ",(0,o.jsx)(n.code,{children:"getMatchingOption()"})," has been deprecated in favor of ",(0,o.jsx)(n.code,{children:"getFirstMatchingOption()"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If you have built custom fields or widgets that utilized any of these breaking-change functions, don't worry, there is a quick and easy solution for you.\nThe ",(0,o.jsx)(n.code,{children:"registry"})," has a breaking-change which removes the previously deprecated ",(0,o.jsx)(n.code,{children:"definitions"})," property while adding the new ",(0,o.jsx)(n.code,{children:"schemaUtils"})," property.\nThis new ",(0,o.jsx)(n.code,{children:"registry.schemaUtils"})," property implements the ",(0,o.jsx)(n.code,{children:"SchemaUtilsType"})," interface, which allows you to call a version of each of these breaking-change functions without the need for passing either a ",(0,o.jsx)(n.code,{children:"validator"})," or ",(0,o.jsx)(n.code,{children:"rootSchema"}),".\nBecause all fields and widgets are guaranteed to be passed the ",(0,o.jsx)(n.code,{children:"registry"})," as a prop, if your custom field/widget happens to use either the ",(0,o.jsx)(n.code,{children:"registry.definitions"})," object or a breaking-change validator-based utility function you make the following changes:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, FieldProps } from '@rjsf/utils';\n\nfunction YourField(props: FieldProps) {\n  const { registry } = props;\n// Change `registry.definitions` to `registry.rootSchema.definitions`\n// const { definitions } = registry; <- version 4\n  const { rootSchema } = registry;\n  const { definitions } = rootSchema;\n...\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// Change breaking-change function to schemaUtils instead, otherwise import from @rjsf/utils\n// import { utils } from '@rjsf/core'; <- version 4\n// const { isMultiSelect, resolveSchema, getUiOptions } = utils; <- version 4\nimport { RJSFSchema, WidgetProps, getUiOptions } from '@rjsf/utils';\n\nfunction YourWidget(props: WidgetProps) {\n  const { registry, uiSchema } = props;\n  const { schemaUtils } = registry;\n// const matchingOption = getMatchingOption({}, options, rootSchema); <- version 4\n// const isMultiSelect = isMultiSelect(schema, rootSchema); <- version 4\n// const newSchema = resolveSchema(schema, formData, rootSchema); <- version 4\n  const matchingOption = schemaUtils.getFirstMatchingOption({}, options);\n  const isMultiSelect = schemaUtils.isMultiSelect(schema);\n  const newSchema: RJSFSchema = schemaUtils.retrieveSchema(schema, formData);\n  const options = getUiOptions(uiSchema);\n\n...\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"validatorjs",children:"validator.js"}),"\n",(0,o.jsxs)(n.p,{children:["Because of the decoupling of validation from ",(0,o.jsx)(n.code,{children:"@rjsf/core"})," this file was refactored into its own ",(0,o.jsx)(n.code,{children:"@rjsf/validator-ajv8"})," package.\nDuring that refactor a few ",(0,o.jsx)(n.strong,{children:"breaking changes"})," were made to how it works related to custom validation and ",(0,o.jsx)(n.code,{children:"ErrorSchema"})," conversion."]}),"\n",(0,o.jsx)(n.h5,{id:"toerrorlist-param-changed",children:"toErrorList param changed"}),"\n",(0,o.jsxs)(n.p,{children:["In previous versions, the ",(0,o.jsx)(n.code,{children:"toErrorList()"})," function used to take a ",(0,o.jsx)(n.code,{children:"fieldName"})," string defaulted to ",(0,o.jsx)(n.code,{children:"root"}),", and used it to format the ",(0,o.jsx)(n.code,{children:"stack"})," message.\nIn version 5, ",(0,o.jsx)(n.code,{children:"fieldName"})," was changed to ",(0,o.jsx)(n.code,{children:"fieldPath"})," string array defaulted to an empty array, and is used to recursively add the field name to the errors as the ",(0,o.jsx)(n.code,{children:"property"})," object along with the raw ",(0,o.jsx)(n.code,{children:"message"}),".\nThe result is that if you had an ",(0,o.jsx)(n.code,{children:"ErrorSchema"})," that looks like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const errorSchema: ErrorSchema = {\n  __errors: ['error message 1'],\n  password: { __errors: 'passwords do not match' },\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The returned result from calling ",(0,o.jsx)(n.code,{children:"toErrorList(errorSchema)"})," has changed as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// version 4 result\n[{ stack: 'root: error message 1' }, { stack: 'password: passwords do not match' }][\n  // version 5 result\n  ({ property: '.', message: 'error message 1', stack: '. error message 1' },\n  {\n    property: '.password',\n    message: 'passwords do not match',\n    stack: '.password passwords do not match',\n  })\n];\n"})}),"\n",(0,o.jsx)(n.h5,{id:"custom-validation-and-extraerrors",children:"Custom validation and extraErrors"}),"\n",(0,o.jsxs)(n.p,{children:["In previous versions, when using a custom validator on the ",(0,o.jsx)(n.code,{children:"Form"}),", any errors that were generated were inconsistently inserted into the validations ",(0,o.jsx)(n.code,{children:"errors"})," list.\nIn addition, there was an ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/1596",children:"issue"})," where the non-",(0,o.jsx)(n.code,{children:"stack"})," AJV error information was lost when custom validation generated errors.\nThis issue has been fixed.\nAlso, when ",(0,o.jsx)(n.code,{children:"extraErrors"})," were provided, they were being inconsistently inserted into the ",(0,o.jsx)(n.code,{children:"errors"})," list and the non-",(0,o.jsx)(n.code,{children:"stack"})," AJV error information was lost.\nIn version 5, all of these errors will be consistently appended onto the end of the validation ",(0,o.jsx)(n.code,{children:"errors"})," list, and the additional AJV error information is maintained."]}),"\n",(0,o.jsxs)(n.p,{children:["In other words, if custom validation or ",(0,o.jsx)(n.code,{children:"extraErrors"})," produced the following ",(0,o.jsx)(n.code,{children:"ErrorSchema"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'{\n  __errors: [ "Please correct your password"],\n  password2: { __errors: "passwords do not match" }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And the AJV validation produced the following ",(0,o.jsx)(n.code,{children:"ErrorSchema"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"{\n  __errors: [\n    {\n      message: 'should NOT be shorter than 3 characters',\n      name: 'minLength',\n      params: { limit: 3 },\n      property: '.password2',\n      schemaPath: '#/properties/password2/minLength',\n      stack: '.password2 should NOT be shorter than 3 characters',\n    },\n  ];\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The resulting ",(0,o.jsx)(n.code,{children:"errors"})," list has changed as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// version 4\n[\n  { stack: 'root: Please correct your password' },\n  { stack: 'password2: passwords do not match' },\n  { stack: 'password2: should NOT be shorter than 3 characters' },\n][\n  // version 5\n  ({\n    message: 'should NOT be shorter than 3 characters',\n    name: 'minLength',\n    params: { limit: 3 },\n    property: '.password2',\n    schemaPath: '#/properties/password2/minLength',\n    stack: '.password2 should NOT be shorter than 3 characters',\n  },\n  {\n    property: '.',\n    message: 'Please correct your password',\n    stack: '. Please correct your password',\n  },\n  {\n    property: '.',\n    message: 'passwords do not match',\n    stack: '.password2 passwords do not match',\n  })\n];\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"generate-correct-ids-when-arrays-are-combined-with-anyofoneof",children:["Generate correct ids when arrays are combined with ",(0,o.jsx)(n.code,{children:"anyOf"}),"/",(0,o.jsx)(n.code,{children:"oneOf"})]}),"\n",(0,o.jsxs)(n.p,{children:["In v4, with arrays inside ",(0,o.jsx)(n.code,{children:"anyOf"})," or ",(0,o.jsx)(n.code,{children:"oneOf"}),", the parent name was not used to generate ids.\nFor example, given a schema such as:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "type": "object",\n  "properties": {\n    "items": {\n      "type": "array",\n      "items": {\n        "type": "object",\n        "anyOf": [\n          {\n            "properties": {\n              "foo": {\n                "type": "string"\n              }\n            }\n          },\n          {\n            "properties": {\n              "bar": {\n                "type": "string"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["We would get fields with id ",(0,o.jsx)(n.code,{children:"root_foo"})," and ",(0,o.jsx)(n.code,{children:"root_bar"}),".\nAs you can imagine, we could end up with duplicated ids if there's actually a ",(0,o.jsx)(n.code,{children:"foo"})," or a ",(0,o.jsx)(n.code,{children:"bar"})," in the root of the schema."]}),"\n",(0,o.jsxs)(n.p,{children:["From v5, the child fields will correctly use the parent id when generating its own id, generating ids such as ",(0,o.jsx)(n.code,{children:"root_items_0_foo"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"deprecations-added-in-v5",children:"Deprecations added in v5"}),"\n",(0,o.jsx)(n.h5,{id:"getmatchingoption",children:"getMatchingOption()"}),"\n",(0,o.jsxs)(n.p,{children:["The utility function ",(0,o.jsx)(n.code,{children:"getMatchingOption()"})," was deprecated in favor of the more aptly named ",(0,o.jsx)(n.code,{children:"getFirstMatchingOption()"})," which has the exact same implementation."]}),"\n",(0,o.jsxs)(n.h5,{id:"non-standard-enumnames-property",children:["Non-standard ",(0,o.jsx)(n.code,{children:"enumNames"})," property"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"enumNames"})," is a non-standard JSON Schema field that was deprecated in version 5.\n",(0,o.jsx)(n.code,{children:"enumNames"})," could be included in the schema to apply labels that differed from an enumeration value.\nThis behavior can still be accomplished with ",(0,o.jsx)(n.code,{children:"oneOf"})," or ",(0,o.jsx)(n.code,{children:"anyOf"})," containing ",(0,o.jsx)(n.code,{children:"const"})," values, so ",(0,o.jsx)(n.code,{children:"enumNames"})," support will be removed from a future major version of RJSF.\nFor more information, see ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/532",children:"#532"}),"."]}),"\n",(0,o.jsx)(n.h5,{id:"uischemaclassnames",children:"uiSchema.classNames"}),"\n",(0,o.jsxs)(n.p,{children:["In versions previous to 5, ",(0,o.jsx)(n.code,{children:"uiSchema.classNames"})," was the only property that did not require the ",(0,o.jsx)(n.code,{children:"ui:"})," prefix.\nAdditionally, it did not support being added into the ",(0,o.jsx)(n.code,{children:"ui:options"})," object.\nThis was fixed in version 5 to be consistent with all the other properties in the ",(0,o.jsx)(n.code,{children:"uiSchema"}),", so the ",(0,o.jsx)(n.code,{children:"uiSchema.classNames"})," support may be removed from a future major version of RJSF."]}),"\n",(0,o.jsxs)(n.p,{children:["If you are using ",(0,o.jsx)(n.code,{children:"classNames"})," as follows, simply add the ",(0,o.jsx)(n.code,{children:"ui:"})," prefix to it to remove the deprecation warning that will be displayed for each ",(0,o.jsx)(n.code,{children:"uiSchema.classNames"})," you have:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { UiSchema } from '@rjsf/utils';\n\n// This uiSchema will log a deprecation warning to the console\nconst uiSchemaLog: UiSchema = {\n  title: {\n    classNames: 'myClass',\n  },\n};\n// This uiSchema will not\nconst uiSchemaNoLog: UiSchema = {\n  title: {\n    'ui:classNames': 'myClass',\n  },\n};\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"rjsfmaterial-ui-breaking-changes",children:[(0,o.jsx)(n.code,{children:"@rjsf/material-ui"})," BREAKING CHANGES"]}),"\n",(0,o.jsxs)(n.p,{children:["This theme was simplified back to working only with Material UI version 4 after an unsuccessful attempt to have it fully support both versions 4 and 5 simultaneously.\nAs a result, the ",(0,o.jsx)(n.code,{children:"MuiComponentContext"}),", ",(0,o.jsx)(n.code,{children:"MuiForm5"}),", ",(0,o.jsx)(n.code,{children:"Theme5"})," components and the ",(0,o.jsx)(n.code,{children:"useMuiComponent"})," hook were removed from the export.\nIn addition, the ",(0,o.jsx)(n.code,{children:"/v4"})," and ",(0,o.jsx)(n.code,{children:"/v5"})," sub-packages were also removed."]}),"\n",(0,o.jsx)(n.h4,{id:"migrating-for-material-ui-version-4",children:"Migrating for Material UI version 4"}),"\n",(0,o.jsxs)(n.p,{children:["If you were using this theme for Material UI version 4 AND you were using the sub-package, simply remove the ",(0,o.jsx)(n.code,{children:"/v4"})," from your imports."]}),"\n",(0,o.jsxs)(n.p,{children:["If you modified your Typescript configuration for the ",(0,o.jsx)(n.code,{children:"/v4"})," sub-package, remove the following from your ",(0,o.jsx)(n.code,{children:"tsconfig.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'{\n  ...\n  "compilerOptions": {\n    ...\n    "baseUrl": ".",\n    "paths": {\n      "@rjsf/material-ui/*": ["node_modules/@rjsf/material-ui/dist/*"]\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If you modified your Jest configuration for the ",(0,o.jsx)(n.code,{children:"/v4"})," sub-package, remove the following from your ",(0,o.jsx)(n.code,{children:"jest.config.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'  "moduleNameMapper": {\n    "@rjsf/material-ui/v4": "<rootDir>/node_modules/@rjsf/material-ui/dist/v4.js"\n  },\n'})}),"\n",(0,o.jsx)(n.h4,{id:"migrating-for-material-ui-version-5",children:"Migrating for Material UI version 5"}),"\n",(0,o.jsxs)(n.p,{children:["If you were using this theme for Material UI version 5, you will want to use ",(0,o.jsx)(n.code,{children:"@rjsf/mui"})," instead.\nSee below for some before and after examples."]}),"\n",(0,o.jsxs)(n.p,{children:["If you modified your Typescript configuration for the ",(0,o.jsx)(n.code,{children:"/v5"})," sub-package, remove the following from your ",(0,o.jsx)(n.code,{children:"tsconfig.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'{\n  ...\n  "compilerOptions": {\n    ...\n    "baseUrl": ".",\n    "paths": {\n      "@rjsf/material-ui/*": ["node_modules/@rjsf/material-ui/dist/*"]\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If you modified your Jest configuration for the ",(0,o.jsx)(n.code,{children:"/v5"})," sub-package, remove the following from your ",(0,o.jsx)(n.code,{children:"jest.config.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'  "moduleNameMapper": {\n    "@rjsf/material-ui/v5": "<rootDir>/node_modules/@rjsf/material-ui/dist/v5.js"\n  },\n'})}),"\n",(0,o.jsx)(n.h5,{id:"before",children:"Before"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import Form5 from '@rjsf/material-ui';\n"})}),"\n",(0,o.jsx)(n.p,{children:"or"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/material-ui/v5';\n"})}),"\n",(0,o.jsx)(n.p,{children:"or"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { withTheme } from '@rjsf/core';\nimport { Theme } from '@rjsf/material-ui/v5';\n// Make modifications to the theme with your own fields and widgets\nconst Form = withTheme(Theme);\n"})}),"\n",(0,o.jsx)(n.p,{children:"or"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { withTheme } from '@rjsf/core';\nimport { Theme as Theme5 } from '@rjsf/material-ui';\n// Make modifications to the theme with your own fields and widgets\nconst Form = withTheme(Theme5);\n"})}),"\n",(0,o.jsx)(n.h5,{id:"after",children:"After"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/mui';\n"})}),"\n",(0,o.jsx)(n.p,{children:"or"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { withTheme } from '@rjsf/core';\nimport { Theme } from '@rjsf/mui';\n// Make modifications to the theme with your own fields and widgets\nconst Form = withTheme(Theme);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);