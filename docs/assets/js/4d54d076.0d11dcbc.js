"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[1459],{1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(4041);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},3985:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"contributing","title":"Contributing","description":"Development server","source":"@site/docs/contributing.md","sourceDirName":".","slug":"/contributing","permalink":"/react-jsonschema-form/docs/contributing","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/contributing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"@rjsf/validator-ajv8 APIs","permalink":"/react-jsonschema-form/docs/api-reference/validator-ajv8"},"next":{"title":"JSON Schema","permalink":"/react-jsonschema-form/docs/json-schema/"}}');var r=t(1085),o=t(1184);const i={},a="Contributing",c={},l=[{value:"Development server",id:"development-server",level:2},{value:"First time step",id:"first-time-step",level:3},{value:"Optional development process",id:"optional-development-process",level:3},{value:"Troubleshooting build failures",id:"troubleshooting-build-failures",level:3},{value:"Cloud builds",id:"cloud-builds",level:2},{value:"Coding style",id:"coding-style",level:2},{value:"Documentation",id:"documentation",level:2},{value:"Tests",id:"tests",level:2},{value:"Snapshot testing",id:"snapshot-testing",level:3},{value:"Code coverage",id:"code-coverage",level:3},{value:"Utils and validator-ajv8 code coverage",id:"utils-and-validator-ajv8-code-coverage",level:4},{value:"Releasing",id:"releasing",level:2},{value:"Updating the peer dependencies for new features in a minor release",id:"updating-the-peer-dependencies-for-new-features-in-a-minor-release",level:3},{value:"Releasing docs",id:"releasing-docs",level:3},{value:"Releasing the playground",id:"releasing-the-playground",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"contributing",children:"Contributing"})}),"\n",(0,r.jsx)(n.h2,{id:"development-server",children:"Development server"}),"\n",(0,r.jsxs)(n.p,{children:["We are using ",(0,r.jsx)(n.code,{children:"Vite"})," to power our ",(0,r.jsx)(n.code,{children:"playground"}),", which caches all the built ",(0,r.jsx)(n.code,{children:"@rjsf/*"})," distributions.\nIn order to test the ",(0,r.jsx)(n.code,{children:"playground"})," locally after a new clone or fresh pull from ",(0,r.jsx)(n.code,{children:"main"}),", run the following from the root directory of the monorepo:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install\nnpm run build\ncd packages/playground\nnpm start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This will start the live development server showcasing components at ",(0,r.jsx)(n.a,{href:"http://localhost:8080",children:"localhost:8080"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Whenever you make changes to source code, stop the running playground and return to the root directory and rerun ",(0,r.jsx)(n.code,{children:"npm run build"}),".\nThanks to ",(0,r.jsx)(n.code,{children:"nx"})," caching, this should only rebuild what is necessary.\nAfter the build is complete, return to the root of the ",(0,r.jsx)(n.code,{children:"playground"})," and restart the server via ",(0,r.jsx)(n.code,{children:"npm start"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"first-time-step",children:"First time step"}),"\n",(0,r.jsxs)(n.p,{children:["If this is the first time you have cloned the repo, run the ",(0,r.jsx)(n.code,{children:"npm run prepare"})," script that will set up ",(0,r.jsx)(n.code,{children:"husky"})," to provide a git precommit hook that will format and lint any code you have added to a PR."]}),"\n",(0,r.jsx)(n.h3,{id:"optional-development-process",children:"Optional development process"}),"\n",(0,r.jsxs)(n.p,{children:["With the large number of packages, sometimes running ",(0,r.jsx)(n.code,{children:"npm run build"})," or ",(0,r.jsx)(n.code,{children:"npm start"})," from the root directory will overwhelm an underpowered computer.\nIf that is the situation for you, you can instead use ",(0,r.jsx)(n.code,{children:"npm run build-serial"})," to build the packages one at a time instead of all at once.\nAlso, if you are only working on one package, you can ",(0,r.jsx)(n.code,{children:"npm run build"})," and ",(0,r.jsx)(n.code,{children:"npm run test"})," from within the subdirectory.\nFinally, you can simply ",(0,r.jsx)(n.code,{children:"npm start"})," inside of the ",(0,r.jsx)(n.code,{children:"playground"})," directory to test changes if you have already built all of your packages, without needing to watch all of the packages via the root directory ",(0,r.jsx)(n.code,{children:"npm start"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"troubleshooting-build-failures",children:"Troubleshooting build failures"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes your local builds fail and you can't figure out why. This is most likely to happen after rebase to ",(0,r.jsx)(n.code,{children:"main"})," due\nto ",(0,r.jsx)(n.code,{children:"package.json"})," changes upstream. There are two commands you can use to (hopefully) get your environment back to a\nworking state. Try running the following two commands:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run refresh-node-modules\nnpm run clean-build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The first command will delete all of the ",(0,r.jsx)(n.code,{children:"node_modules"})," directories in the environment and then rerun ",(0,r.jsx)(n.code,{children:"npm install"}),".\nThe second command cleans up the typescript build cache files before retrying the build."]}),"\n",(0,r.jsxs)(n.p,{children:["Worst case scenario when neither of those commands work, try running ",(0,r.jsx)(n.code,{children:"npm run nuke-build-env"})," and then rerun the two commands."]}),"\n",(0,r.jsx)(n.h2,{id:"cloud-builds",children:"Cloud builds"}),"\n",(0,r.jsxs)(n.p,{children:["When building in environments with limited memory, such as Netlify, it's recommended to use ",(0,r.jsx)(n.code,{children:"npm run build-serial"})," that builds the packages serially."]}),"\n",(0,r.jsx)(n.h2,{id:"coding-style",children:"Coding style"}),"\n",(0,r.jsxs)(n.p,{children:["All the JavaScript/Typescript code in this project conforms to the ",(0,r.jsx)(n.a,{href:"https://github.com/prettier/prettier",children:"prettier"})," coding style.\nCode is automatically prettified upon commit using precommit hooks, assuming you followed the ",(0,r.jsx)(n.code,{children:"First time step"})," above."]}),"\n",(0,r.jsxs)(n.p,{children:["You can also run ",(0,r.jsx)(n.code,{children:"npm cs-format"})," within any package directory you are changing."]}),"\n",(0,r.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://docusaurus.io/",children:"Docusaurus"})," to build our documentation. To run documentation locally, run:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd packages/docs\nnpm start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Documentation will be served on ",(0,r.jsx)(n.a,{href:"http://localhost:3000",children:"localhost:3000"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"tests",children:"Tests"}),"\n",(0,r.jsxs)(n.p,{children:["You can run all tests from the root directory OR from ",(0,r.jsx)(n.code,{children:"packages"})," subdirectory using the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run test\n"})}),"\n",(0,r.jsx)(n.h3,{id:"snapshot-testing",children:"Snapshot testing"}),"\n",(0,r.jsxs)(n.p,{children:["All the themes, including ",(0,r.jsx)(n.code,{children:"core"})," use snapshot testing (NOTE: ",(0,r.jsx)(n.code,{children:"core"})," also has extensive non-snapshot tests).\nThe source-code of these snapshot tests reside in the ",(0,r.jsx)(n.code,{children:"core"})," package in the ",(0,r.jsx)(n.code,{children:"testSnap"})," directory and are shared with all the themes.\nIn order to support the various themes, the code for the tests are actually functions that take two parameters:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Form"}),": ComponentType<FormProps> - The component from the theme implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[customOptions]"}),": { [key: string]: TestRendererOptions } - an optional map of ",(0,r.jsx)(n.code,{children:"react-test-renderer"})," ",(0,r.jsx)(n.code,{children:"TestRendererOptions"})," implementations that some themes need to be able properly run"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["There are functions in the ",(0,r.jsx)(n.code,{children:"testSnap"})," directory: ",(0,r.jsx)(n.code,{children:"arrayTests"}),", ",(0,r.jsx)(n.code,{children:"formTests"})," and ",(0,r.jsx)(n.code,{children:"objectTests"}),", each with its own definition of ",(0,r.jsx)(n.code,{children:"customOptions"})]}),"\n",(0,r.jsxs)(n.p,{children:["Each theme will basically run these functions by creating a ",(0,r.jsx)(n.code,{children:"Xxx.test.tsx"})," file (where ",(0,r.jsx)(n.code,{children:"Xxx"})," is ",(0,r.jsx)(n.code,{children:"Array"}),", ",(0,r.jsx)(n.code,{children:"Form"})," or ",(0,r.jsx)(n.code,{children:"Object"}),") that looks like the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { arrayTests } from '@rjsf/snapshot-tests'; // OR\n// import { formTests } from '@rjsf/snapshot-tests';\n// import { objectTests } from '@rjsf/snapshot-tests';\n\nimport Form from '../src';\n\narrayTests(Form); // OR\n// formTests(Form);\n// objectTests(Form);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Anytime you add a new feature, be sure to update the appropriate ",(0,r.jsx)(n.code,{children:"xxxTests()"})," function in the ",(0,r.jsx)(n.code,{children:"testSnap"})," directory and do ",(0,r.jsx)(n.code,{children:"npm run test"})," from the root directory to update all the snapshots.\nIf you add a theme-only feature, it is ok to update the appropriate ",(0,r.jsx)(n.code,{children:"Xxx.test.tsx"})," file to add (or update) the theme-specific ",(0,r.jsx)(n.code,{children:"describe()"})," block.\nFor example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport { arrayTests } from '@rjsf/snapshot-tests';\n\nimport Form from '../src';\n\nformTests(Form);\n\ndescribe('Theme specific tests', () => {\n  it('test a theme-specific option', () => {\n    const schema: RJSFSchema = {\n      type: 'object',\n      properties: {\n        name: {\n          type: 'string',\n        },\n      },\n    };\n    const uiSchema: UiSchema = {\n      // Enable the theme specific feature\n    };\n    const tree = renderer.create(<Form schema={schema} uiSchema={uiSchema} validator={validator} />).toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.code,{children:"antd"})," ",(0,r.jsx)(n.code,{children:"Form.test.tsx"})," for a specific example of this."]}),"\n",(0,r.jsx)(n.h3,{id:"code-coverage",children:"Code coverage"}),"\n",(0,r.jsxs)(n.p,{children:["Code coverage reports are currently available only for the ",(0,r.jsx)(n.code,{children:"@rjsf/core"})," theme package.\nThey are generated using ",(0,r.jsx)(n.a,{href:"https://github.com/istanbuljs/nyc",children:"nyc"})," each time the ",(0,r.jsx)(n.code,{children:"npm test-coverage"})," script is run.\nThe full report can be seen by opening ",(0,r.jsx)(n.code,{children:"./coverage/lcov-report/index.html"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"utils-and-validator-ajv8-code-coverage",children:"Utils and validator-ajv8 code coverage"}),"\n",(0,r.jsxs)(n.p,{children:["100% code coverage is required by the ",(0,r.jsx)(n.code,{children:"@rjsf/utils"})," and ",(0,r.jsx)(n.code,{children:"@rjsf/validator-ajv8"})," tests.\nIf you make changes to those libraries, you will have to maintain that coverage, otherwise the tests will fail."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["NOTE: All three of these directories share the same tests for verifying ",(0,r.jsx)(n.code,{children:"validator"})," based APIs. See the documentation in the ",(0,r.jsx)(n.code,{children:"getTestValidator()"})," functions for more information."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"releasing",children:"Releasing"}),"\n",(0,r.jsxs)(n.p,{children:["To release, go to the main branch (NOT a fork) and then create a new branch with the version number (with an ",(0,r.jsx)(n.code,{children:"rc"})," prefix instead of ",(0,r.jsx)(n.code,{children:"v"}),").\nFor instance if you are about to create the new ",(0,r.jsx)(n.code,{children:"6.100.10"})," branch, then you would run the following commands:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'git checkout -b rc6.100.10\nnpx nx release version --git-tag\ngit commit -m "Releasing 6.100.10"\ngit push\nnpm run update-version-tags\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Make sure you use ",(0,r.jsx)(n.a,{href:"https://semver.org/",children:"semver"})," for version numbering when selecting the version.\nThe ",(0,r.jsx)(n.code,{children:"npx nx release version --git-tag"})," command will update the ",(0,r.jsx)(n.code,{children:"package*.josn"})," files and create a new version tag.\nCommitting and pushing the branch will allow you to create the PR on GitHub.\nThe ",(0,r.jsx)(n.code,{children:"npm run update-version-tags"})," will push the tags up to GitHub."]}),"\n",(0,r.jsx)(n.p,{children:'Then, make a PR to main. Merge the PR into main -- make sure you use "merge commit", not squash and merge, so that\nthe original commit where the tag was based on is still present in the main branch.'}),"\n",(0,r.jsxs)(n.p,{children:['Then, create a release in the GitHub "Releases" tab, select the new tag that you have added,\nand add a description of the changes in the new release. You can copy\nthe latest changelog entry in ',(0,r.jsx)(n.code,{children:"CHANGELOG.md"})," to make the release notes, and update as necessary."]}),"\n",(0,r.jsx)(n.p,{children:"This will trigger a GitHub Actions pipeline that will build and publish all packages to npm."}),"\n",(0,r.jsxs)(n.p,{children:["The package is published through an automation token belonging to the\n",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/~rjsf-bot",children:"rjsf-bot"})," user on npm. This token\nis stored as the ",(0,r.jsx)(n.code,{children:"NPM_TOKEN"})," secret on GitHub Actions."]}),"\n",(0,r.jsx)(n.h3,{id:"updating-the-peer-dependencies-for-new-features-in-a-minor-release",children:"Updating the peer dependencies for new features in a minor release"}),"\n",(0,r.jsx)(n.p,{children:"If a set of changes added new features or APIs that require updating downstream peer dependencies, then run the following\ncommand:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run post-versioning\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"npm run post-versioning"})," script will update the peer dependencies in all of the ",(0,r.jsx)(n.code,{children:"packages/*/package.json"})," files if necessary.\nIt will then clean up the ",(0,r.jsx)(n.code,{children:"node_modules"})," directories and rerun ",(0,r.jsx)(n.code,{children:"npm install"})," to update the ",(0,r.jsx)(n.code,{children:"package-lock.json"})," files.\nFinally, it creates and pushes a new commit with those ",(0,r.jsx)(n.code,{children:"package.json"})," and ",(0,r.jsx)(n.code,{children:"package-lock.json"})," files up to GitHub."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"NOTE: this command will take a while, be patient"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"releasing-docs",children:"Releasing docs"}),"\n",(0,r.jsxs)(n.p,{children:["Docs are automatically published to GitHub Pages when the ",(0,r.jsx)(n.code,{children:"main"})," branch is updated."]}),"\n",(0,r.jsx)(n.p,{children:"We are currently in the process of automatically configuring versionable documentation on our new docs site."}),"\n",(0,r.jsx)(n.h3,{id:"releasing-the-playground",children:"Releasing the playground"}),"\n",(0,r.jsx)(n.p,{children:"The playground automatically gets deployed from GitHub Pages."}),"\n",(0,r.jsxs)(n.p,{children:["If you need to manually publish the latest playground to ",(0,r.jsx)(n.a,{href:"https://rjsf-team.github.io/react-jsonschema-form/",children:"https://rjsf-team.github.io/react-jsonschema-form/"}),", though, run:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd packages/playground\nnpm run publish-to-gh-pages\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);