"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[3426],{1184:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var s=i(4041);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}},8254:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"usage/widgets","title":"Widgets","description":"The uiSchema ui:widget property tells the form which UI widget should be used to render a field.","source":"@site/docs/usage/widgets.md","sourceDirName":"usage","slug":"/usage/widgets","permalink":"/react-jsonschema-form/docs/usage/widgets","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/usage/widgets.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Validation","permalink":"/react-jsonschema-form/docs/usage/validation"}}');var t=i(1085),r=i(1184);const d={},l="Widgets",c={},o=[{value:"For <code>boolean</code> fields",id:"for-boolean-fields",level:2},{value:"For <code>string</code> fields",id:"for-string-fields",level:2},{value:"String formats",id:"string-formats",level:3},{value:"For <code>number</code> and <code>integer</code> fields",id:"for-number-and-integer-fields",level:2},{value:"Hidden widgets",id:"hidden-widgets",level:2},{value:"File widgets",id:"file-widgets",level:2},{value:"Multiple files",id:"multiple-files",level:3},{value:"File widget input ref",id:"file-widget-input-ref",level:3},{value:"<code>accept</code> option",id:"accept-option",level:3}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"widgets",children:"Widgets"})}),"\n",(0,t.jsxs)(n.p,{children:["The uiSchema ",(0,t.jsx)(n.code,{children:"ui:widget"})," property tells the form which UI widget should be used to render a field."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    done: {\n      type: 'boolean',\n    },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  done: {\n    'ui:widget': 'radio', // could also be \"select\"\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here's a list of supported alternative widgets for different JSON Schema data types:"}),"\n",(0,t.jsxs)(n.h2,{id:"for-boolean-fields",children:["For ",(0,t.jsx)(n.code,{children:"boolean"})," fields"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"radio"}),": a radio button group with ",(0,t.jsx)(n.code,{children:"true"})," and ",(0,t.jsx)(n.code,{children:"false"})," as selectable values;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"select"}),": a select box with ",(0,t.jsx)(n.code,{children:"true"})," and ",(0,t.jsx)(n.code,{children:"false"})," as options;"]}),"\n",(0,t.jsx)(n.li,{children:"by default, a checkbox is used"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: To set the labels for a boolean field, instead of using ",(0,t.jsx)(n.code,{children:"true"})," and ",(0,t.jsx)(n.code,{children:"false"}),", your schema can use ",(0,t.jsx)(n.code,{children:"oneOf"})," with ",(0,t.jsx)(n.code,{children:"const"})," values for both true and false, where you can specify the custom label in the ",(0,t.jsx)(n.code,{children:"title"})," field. You will also need to specify a widget in your ",(0,t.jsx)(n.code,{children:"uiSchema"}),". See the following example:"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"schema:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "properties": {\n    "booleanWithCustomLabels": {\n      "type": "boolean",\n      "oneOf": [\n        { "const": true, "title": "Custom label for true" },\n        { "const": false, "title": "Custom label for false" }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"uiSchema:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "booleanWithCustomLabels": {\n    "ui:widget": "radio" // or "select"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"for-string-fields",children:["For ",(0,t.jsx)(n.code,{children:"string"})," fields"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"textarea"}),": a ",(0,t.jsx)(n.code,{children:"textarea"})," element is used;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"password"}),": an ",(0,t.jsx)(n.code,{children:"input[type=password]"})," element is used;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"color"}),": an ",(0,t.jsx)(n.code,{children:"input[type=color]"})," element is used;"]}),"\n",(0,t.jsxs)(n.li,{children:["by default, a regular ",(0,t.jsx)(n.code,{children:"input[type=text]"})," element is used."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"string-formats",children:"String formats"}),"\n",(0,t.jsxs)(n.p,{children:["The built-in string field also supports the JSON Schema ",(0,t.jsx)(n.code,{children:"format"})," property, and will render an appropriate widget by default for the following string formats:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"email"}),": An ",(0,t.jsx)(n.code,{children:"input[type=email]"})," element is used;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"uri"}),": An ",(0,t.jsx)(n.code,{children:"input[type=url]"})," element is used;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data-url"}),": By default, an ",(0,t.jsx)(n.code,{children:"input[type=file]"})," element is used; in case the string is part of an array, multiple files will be handled automatically (see ",(0,t.jsx)(n.a,{href:"#file-widgets",children:"File widgets"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date"}),": By default, an ",(0,t.jsx)(n.code,{children:"input[type=date]"})," element is used;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"date-time"}),": By default, an ",(0,t.jsx)(n.code,{children:"input[type=datetime-local]"})," element is used."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"time"}),": By default an ",(0,t.jsx)(n.code,{children:"input[type=time]"})," element is used;"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://i.imgur.com/xqu6Lcp.png",alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["Please note that, even though they are standardized, ",(0,t.jsx)(n.code,{children:"datetime-local"}),", ",(0,t.jsx)(n.code,{children:"date"})," and ",(0,t.jsx)(n.code,{children:"time"})," input elements are not supported by IE. If you plan on targeting IE, two alternative widgets are available:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"alt-datetime"}),": Six ",(0,t.jsx)(n.code,{children:"select"})," elements are used to select the year, the month, the day, the hour, the minute and the second;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"alt-date"}),": Three ",(0,t.jsx)(n.code,{children:"select"})," elements are used to select the year, month and the day."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://i.imgur.com/VF5tY60.png",alt:""})}),"\n",(0,t.jsxs)(n.p,{children:["You can customize the list of years displayed in the ",(0,t.jsx)(n.code,{children:"year"})," dropdown by providing a ",(0,t.jsx)(n.code,{children:"yearsRange"})," property to ",(0,t.jsx)(n.code,{children:"ui:options"})," in your uiSchema.\nThe range can be descending by specifying the larger value first.\nIt's also possible to remove the ",(0,t.jsx)(n.code,{children:"Now"})," and ",(0,t.jsx)(n.code,{children:"Clear"})," buttons with the ",(0,t.jsx)(n.code,{children:"hideNowButton"})," and ",(0,t.jsx)(n.code,{children:"hideClearButton"})," options."]}),"\n",(0,t.jsxs)(n.p,{children:["You can also, customize the order in which date input fields are displayed by providing ",(0,t.jsx)(n.code,{children:"format"})," property to ",(0,t.jsx)(n.code,{children:"ui:options"})," in your uiSchema, available values are ",(0,t.jsx)(n.code,{children:"YMD"}),"(default), ",(0,t.jsx)(n.code,{children:"MDY"})," and ",(0,t.jsx)(n.code,{children:"DMY"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'alt-datetime',\n  'ui:options': {\n    yearsRange: [1980, 2030],\n    format: 'MDY',\n    hideNowButton: true,\n    hideClearButton: true,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also specify negative values which will be treated relative to the current year, so if it is 2020 and the range is set as follows."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"   yearsRange: [-120, -18],\n"})}),"\n",(0,t.jsx)(n.p,{children:"Years from 1900-2002 will be shown. You can also specify the dates with the higher date first to display dates in reverse order."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"   yearsRange: [2030, 1980],\n   ...\n   yearsRange: [-18, -120],\n"})}),"\n",(0,t.jsx)(n.p,{children:"Years from 2030-1980 and 2002-1900, respectively will be shown."}),"\n",(0,t.jsxs)(n.h2,{id:"for-number-and-integer-fields",children:["For ",(0,t.jsx)(n.code,{children:"number"})," and ",(0,t.jsx)(n.code,{children:"integer"})," fields"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"updown"}),": an ",(0,t.jsx)(n.code,{children:"input[type=number]"})," updown selector;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"range"}),": an ",(0,t.jsx)(n.code,{children:"input[type=range]"})," slider;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"radio"}),": a radio button group with enum values. This can only be used when ",(0,t.jsx)(n.code,{children:"enum"})," values are specified for this input."]}),"\n",(0,t.jsxs)(n.li,{children:["By default, a regular ",(0,t.jsx)(n.code,{children:"input[type=number]"})," element is used."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: If JSON Schema's ",(0,t.jsx)(n.code,{children:"minimum"}),", ",(0,t.jsx)(n.code,{children:"maximum"})," and ",(0,t.jsx)(n.code,{children:"multipleOf"})," values are defined, the ",(0,t.jsx)(n.code,{children:"min"}),", ",(0,t.jsx)(n.code,{children:"max"})," and ",(0,t.jsx)(n.code,{children:"step"})," input attributes values will take those values."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"hidden-widgets",children:"Hidden widgets"}),"\n",(0,t.jsxs)(n.p,{children:["It's possible to use a hidden widget for a field by setting its ",(0,t.jsx)(n.code,{children:"ui:widget"})," uiSchema directive to ",(0,t.jsx)(n.code,{children:"hidden"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'boolean' },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  foo: { 'ui:widget': 'hidden' },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.p,{children:"Notes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Hiding widgets is only supported for ",(0,t.jsx)(n.code,{children:"boolean"}),", ",(0,t.jsx)(n.code,{children:"string"}),", ",(0,t.jsx)(n.code,{children:"number"})," and ",(0,t.jsx)(n.code,{children:"integer"})," schema types;"]}),"\n",(0,t.jsxs)(n.li,{children:["A hidden widget takes its value from the ",(0,t.jsx)(n.code,{children:"formData"})," prop."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"file-widgets",children:"File widgets"}),"\n",(0,t.jsxs)(n.p,{children:["This library supports a limited form of ",(0,t.jsx)(n.code,{children:"input[type=file]"})," widgets, in the sense that it will propagate file contents to form data state as ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs",children:"data-url"}),"s."]}),"\n",(0,t.jsx)(n.p,{children:"There are two ways to use file widgets."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["By declaring a ",(0,t.jsx)(n.code,{children:"string"})," json schema type along a ",(0,t.jsx)(n.code,{children:"data-url"})," ",(0,t.jsx)(n.a,{href:"#string-formats",children:"format"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import Form from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'data-url',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["By specifying a ",(0,t.jsx)(n.code,{children:"ui:widget"})," field uiSchema directive as ",(0,t.jsx)(n.code,{children:"file"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:widget': 'file',\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"multiple-files",children:"Multiple files"}),"\n",(0,t.jsxs)(n.p,{children:["Multiple files selectors are supported by defining an array of strings having ",(0,t.jsx)(n.code,{children:"data-url"})," as a format:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { RJSFSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'array',\n  items: {\n    type: 'string',\n    format: 'data-url',\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note that storing large dataURIs into form state might slow rendering."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"file-widget-input-ref",children:"File widget input ref"}),"\n",(0,t.jsxs)(n.p,{children:["The included ",(0,t.jsx)(n.code,{children:"FileWidget"})," exposes a reference to the ",(0,t.jsx)(n.code,{children:'<input type="file" />'})," element node as an ",(0,t.jsx)(n.code,{children:"inputRef"})," component property."]}),"\n",(0,t.jsx)(n.p,{children:"This allows you to programmatically trigger the browser's file selector, which can be used in a custom file widget."}),"\n",(0,t.jsxs)(n.h3,{id:"accept-option",children:[(0,t.jsx)(n.code,{children:"accept"})," option"]}),"\n",(0,t.jsx)(n.p,{children:"You can use the accept attribute to specify a filter for what file types the user can upload:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'data-url',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:options': { accept: '.pdf' },\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);