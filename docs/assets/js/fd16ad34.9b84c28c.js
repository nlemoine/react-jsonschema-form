"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[6762],{1184:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var s=i(4041);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},6978:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api-reference/uiSchema","title":"uiSchema","description":"JSON Schema is limited for describing how a given data type should be rendered as a form input component. That\'s why this library introduces the concept of uiSchema.","source":"@site/versioned_docs/version-3.2.1/api-reference/uiSchema.md","sourceDirName":"api-reference","slug":"/api-reference/uiSchema","permalink":"/react-jsonschema-form/docs/version-3.2.1/api-reference/uiSchema","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/api-reference/uiSchema.md","tags":[],"version":"3.2.1","frontMatter":{},"sidebar":"docs","previous":{"title":"uiSchema Options for Semantic-UI","permalink":"/react-jsonschema-form/docs/version-3.2.1/api-reference/themes/semantic-ui/uiSchema"},"next":{"title":"Usage and Customization","permalink":"/react-jsonschema-form/docs/version-3.2.1/usage/"}}');var t=i(1085),r=i(1184);const c={},l="uiSchema",a={},o=[{value:"classNames",id:"classnames",level:2},{value:"autofocus",id:"autofocus",level:2},{value:"description",id:"description",level:2},{value:"disabled",id:"disabled",level:2},{value:"enumDisabled",id:"enumdisabled",level:2},{value:"help",id:"help",level:2},{value:"inputType",id:"inputtype",level:2},{value:"label",id:"label",level:2},{value:"order",id:"order",level:2},{value:"placeholder",id:"placeholder",level:2},{value:"readonly",id:"readonly",level:2},{value:"rootFieldId",id:"rootfieldid",level:2},{value:"rows",id:"rows",level:2},{value:"title",id:"title",level:2},{value:"Theme Options",id:"theme-options",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"uischema",children:"uiSchema"})}),"\n",(0,t.jsx)(n.p,{children:"JSON Schema is limited for describing how a given data type should be rendered as a form input component. That's why this library introduces the concept of uiSchema."}),"\n",(0,t.jsxs)(n.p,{children:["A UI schema is basically an object literal providing information on ",(0,t.jsx)(n.strong,{children:"how"})," the form should be rendered, while the JSON schema tells ",(0,t.jsx)(n.strong,{children:"what"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The uiSchema object follows the tree structure of the form field hierarchy, and defines how each property should be rendered."}),"\n",(0,t.jsxs)(n.p,{children:["Note that every property within uiSchema can be rendered in one of two ways: ",(0,t.jsx)(n.code,{children:'{"ui:options": {[property]: [value]}}'}),", or ",(0,t.jsx)(n.code,{children:'{"ui:[property]": value}'}),"."]}),"\n",(0,t.jsx)(n.p,{children:"In other words, the following uiSchemas are equivalent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "ui:title": "Title",\n  "ui:description": "Description"\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "ui:options": {\n    "title": "Title",\n    "description": "Description"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"classnames",children:"classNames"}),"\n",(0,t.jsxs)(n.p,{children:["The uiSchema object accepts a ",(0,t.jsx)(n.code,{children:"classNames"})," property for each field of the schema:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const uiSchema = {\n  title: {\n    classNames: "task-title foo-bar"\n  }\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:"Will result in:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<div class="field field-string task-title foo-bar" >\n  <label>\n    <span>Title*</span>\n    <input value="My task" required="" type="text">\n  </label>\n</div>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"autofocus",children:"autofocus"}),"\n",(0,t.jsxs)(n.p,{children:["If you want to automatically focus on a text input or textarea input, set the ",(0,t.jsx)(n.code,{children:"ui:autofocus"})," uiSchema directive to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const schema = {type: "string"};\nconst uiSchema = {\n  "ui:widget": "textarea",\n  "ui:autofocus": true\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"description"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes it's convenient to change the description of a field. This is the purpose of the ",(0,t.jsx)(n.code,{children:"ui:description"})," uiSchema directive:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const schema = {type: "string"};\nconst uiSchema = {\n  "ui:widget": "password",\n  "ui:description": "The best password"\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"disabled",children:"disabled"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ui:disabled"})," uiSchema directive will disable all child widgets from a given field."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: If you're wondering about the difference between a ",(0,t.jsx)(n.code,{children:"disabled"})," field and a ",(0,t.jsx)(n.code,{children:"readonly"})," one: Marking a field as read-only will render it greyed out, but its text value will be selectable. Disabling it will prevent its value to be selected at all."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"enumdisabled",children:"enumDisabled"}),"\n",(0,t.jsxs)(n.p,{children:["To disable an option, use the ",(0,t.jsx)(n.code,{children:"enumDisabled"})," property in uiSchema."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const schema = {\n  type: "string",\n  enum: ["one", "two", "three"],\n};\n\nconst uiSchema={\n  "ui:enumDisabled": [\'two\'],\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"help",children:"help"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes it's convenient to add text next to a field to guide the end user filling it. This is the purpose of the ",(0,t.jsx)(n.code,{children:"ui:help"})," uiSchema directive:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const schema = {type: "string"};\nconst uiSchema = {\n  "ui:widget": "password",\n  "ui:help": "Hint: Make it strong!"\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://i.imgur.com/scJUuZo.png",alt:""})}),"\n",(0,t.jsx)(n.p,{children:"Help texts work for any kind of field at any level, and will always be rendered immediately below the field component widget(s) (after contextualized errors, if any)."}),"\n",(0,t.jsx)(n.h2,{id:"inputtype",children:"inputType"}),"\n",(0,t.jsxs)(n.p,{children:["To change the input type (for example, ",(0,t.jsx)(n.code,{children:"tel"})," or ",(0,t.jsx)(n.code,{children:"email"}),") you can specify the ",(0,t.jsx)(n.code,{children:"inputType"})," in the ",(0,t.jsx)(n.code,{children:"ui:options"})," uiSchema directive."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {type: "string"};\nconst uiSchema = {\n  "ui:options": {\n    inputType: \'tel\'\n  }\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"label",children:"label"}),"\n",(0,t.jsxs)(n.p,{children:["Field labels are rendered by default. Labels may be omitted by setting the ",(0,t.jsx)(n.code,{children:"label"})," option to ",(0,t.jsx)(n.code,{children:"false"})," in the ",(0,t.jsx)(n.code,{children:"ui:options"})," uiSchema directive."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {type: "string"};\nconst uiSchema = {\n  "ui:options": {\n    label: false\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsx)(n.h2,{id:"order",children:"order"}),"\n",(0,t.jsxs)(n.p,{children:["This property allows you to reorder the properties that are shown for a particular object. See ",(0,t.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-3.2.1/usage/objects",children:"Objects"})," for more information."]}),"\n",(0,t.jsx)(n.h2,{id:"placeholder",children:"placeholder"}),"\n",(0,t.jsxs)(n.p,{children:["You can add placeholder text to an input by using the ",(0,t.jsx)(n.code,{children:"ui:placeholder"})," uiSchema directive:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {type: "string", format: "uri"};\nconst uiSchema = {\n  "ui:placeholder": "http://"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Fields using ",(0,t.jsx)(n.code,{children:"enum"})," can also use ",(0,t.jsx)(n.code,{children:"ui:placeholder"}),". The value will be used as the text for the empty option in the select widget."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {type: "string", enum: ["First", "Second"]};\nconst uiSchema = {\n  "ui:placeholder": "Choose an option"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsx)(n.h2,{id:"readonly",children:"readonly"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ui:readonly"})," uiSchema directive will mark all child widgets from a given field as read-only. This is equivalent to setting the ",(0,t.jsx)(n.code,{children:"readOnly"})," property in the schema."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: If you're wondering about the difference between a ",(0,t.jsx)(n.code,{children:"disabled"})," field and a ",(0,t.jsx)(n.code,{children:"readonly"})," one: Marking a field as read-only will render it greyed out, but its text value will be selectable. Disabling it will prevent its value to be selected at all."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rootfieldid",children:"rootFieldId"}),"\n",(0,t.jsxs)(n.p,{children:["By default, this library will generate ids unique to the form for all rendered widgets. If you plan on using multiple instances of the ",(0,t.jsx)(n.code,{children:"Form"})," component in a same page, it's wise to declare a root prefix for these, using the ",(0,t.jsx)(n.code,{children:"ui:rootFieldId"})," uiSchema directive:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const uiSchema = {\n  "ui:rootFieldId": "myform"\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This will make all widgets have an id prefixed with ",(0,t.jsx)(n.code,{children:"myform"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"rows",children:"rows"}),"\n",(0,t.jsxs)(n.p,{children:["You can set the initial height of a textarea widget by specifying ",(0,t.jsx)(n.code,{children:"rows"})," option."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const schema = {type: "string"};\nconst uiSchema = {\n  "ui:widget": "textarea",\n  "ui:options": {\n    rows: 15\n  }\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsx)(n.h2,{id:"title",children:"title"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes it's convenient to change a field's title. This is the purpose of the ",(0,t.jsx)(n.code,{children:"ui:title"})," uiSchema directive:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const schema = {type: "string"};\nconst uiSchema = {\n  "ui:widget": "password",\n  "ui:title": "Your password"\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"theme-options",children:"Theme Options"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-3.2.1/api-reference/themes/semantic-ui/uiSchema",children:"Semantic UI"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);