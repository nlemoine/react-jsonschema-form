"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[3331],{1184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(4041);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},1639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"quickstart","title":"Quickstart","description":"Let\'s walk through setup of a form after installing the dependency properly.","source":"@site/versioned_docs/version-4.2.3/00-quickstart.md","sourceDirName":".","slug":"/quickstart","permalink":"/react-jsonschema-form/docs/version-4.2.3/quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-4.2.3/00-quickstart.md","tags":[],"version":"4.2.3","sidebarPosition":0,"frontMatter":{},"sidebar":"docs","next":{"title":"Advanced Customization","permalink":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/"}}');var o=t(1085),r=t(1184);const a={},c="Quickstart",i={},l=[{value:"Form schema",id:"form-schema",level:2},{value:"Form uiSchema",id:"form-uischema",level:2},{value:"Form initialization",id:"form-initialization",level:2},{value:"Form event handlers",id:"form-event-handlers",level:3},{value:"Controlled component",id:"controlled-component",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quickstart",children:"Quickstart"})}),"\n",(0,o.jsx)(n.p,{children:"Let's walk through setup of a form after installing the dependency properly."}),"\n",(0,o.jsx)(n.h2,{id:"form-schema",children:"Form schema"}),"\n",(0,o.jsxs)(n.p,{children:["First, specify a schema using the ",(0,o.jsx)(n.a,{href:"https://json-schema.org/",children:"JSON Schema specification"}),". The below schema renders a single string field:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  title: "Test form",\n  type: "string"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can also render an object with multiple fields with the below schema:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  title: "Test form",\n  type: "object",\n  properties: {\n    name: {\n      type: "string"\n    },\n    age: {\n      type: "number"\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For more information and examples of JSON Schema properties that this library supports, see ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-4.2.3/usage/single",children:"Using JSON Schema"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"form-uischema",children:"Form uiSchema"}),"\n",(0,o.jsxs)(n.p,{children:["The uiSchema is used to add more customization to the form's look and feel. Use the ",(0,o.jsx)(n.code,{children:"classNames"}),"\nattribute of the uiSchema to add a custom CSS class name to the form:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  title: "Test form",\n  type: "string"\n};\n\nconst uiSchema = {\n  classNames: "custom-css-class"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To customize object fields in the uiSchema, the structure of the\nuiSchema should be ",(0,o.jsx)(n.code,{children:"{key: value}"}),", where ",(0,o.jsx)(n.code,{children:"key"})," is the property key and ",(0,o.jsx)(n.code,{children:"value"})," is an\nobject with the uiSchema configuration for that particular property. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  title: "Test form",\n  type: "object",\n  properties: {\n    name: {\n      type: "string"\n    },\n    age: {\n      type: "number"\n    }\n  }\n};\n\nconst uiSchema = {\n  name: {\n    classNames: "custom-class-name"\n  },\n  age: {\n    classNames: "custom-class-age"\n  }\n}\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsx)(n.h2,{id:"form-initialization",children:"Form initialization"}),"\n",(0,o.jsxs)(n.p,{children:["Often you'll want to prefill a form with existing data; this is done by passing a ",(0,o.jsx)(n.code,{children:"formData"})," prop object matching the schema:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "object",\n  properties: {\n    title: {\n      type: "string"\n    },\n    done: {\n      type: "boolean"\n    }\n  }\n};\n\nconst formData = {\n  title: "First task",\n  done: true\n};\n\nrender((\n  <Form schema={schema}\n        formData={formData} />\n), document.getElementById("app"));\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Note: If your form has a single field, pass a single value to ",(0,o.jsx)(n.code,{children:"formData"}),". ex: ",(0,o.jsx)(n.code,{children:'formData="Charlie"'})]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["WARNING: If you have situations where your parent component can re-render, make sure you listen to the ",(0,o.jsx)(n.code,{children:"onChange"})," event and update the data you pass to the ",(0,o.jsx)(n.code,{children:"formData"})," attribute."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"form-event-handlers",children:"Form event handlers"}),"\n",(0,o.jsxs)(n.p,{children:["You can use event handlers such as ",(0,o.jsx)(n.code,{children:"onChange"}),", ",(0,o.jsx)(n.code,{children:"onError"}),", ",(0,o.jsx)(n.code,{children:"onSubmit"}),", ",(0,o.jsx)(n.code,{children:"onFocus"}),", and ",(0,o.jsx)(n.code,{children:"onBlur"})," on the ",(0,o.jsx)(n.code,{children:"<Form />"})," component; see the ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/version-4.2.3/api-reference/form-props",children:"Form Props Reference"})," for more details."]}),"\n",(0,o.jsx)(n.h3,{id:"controlled-component",children:"Controlled component"}),"\n",(0,o.jsxs)(n.p,{children:["By default, ",(0,o.jsx)(n.code,{children:"<Form />"})," is an ",(0,o.jsx)(n.a,{href:"https://reactjs.org/docs/uncontrolled-components.html",children:"uncontrolled component"}),". To make it a controlled component, use the\n",(0,o.jsx)(n.code,{children:"onChange"})," and ",(0,o.jsx)(n.code,{children:"formData"})," props as in the below example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const App = () => {\n  const [formData, setFormData] = React.useState(null);\n  return (<Form\n    schema={{type: "string"}}\n    formData={formData}\n    onChange={e => setFormData(e.formData)}\n  />);\n};\n\nrender((\n  <App />\n), document.getElementById("app"));\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);