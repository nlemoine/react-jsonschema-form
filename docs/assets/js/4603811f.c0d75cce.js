"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[1818],{1184:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var o=r(4041);const t={},i=o.createContext(t);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},8170:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"json-schema/objects","title":"Objects","description":"Object properties","source":"@site/versioned_docs/version-5.24.10/json-schema/objects.md","sourceDirName":"json-schema","slug":"/json-schema/objects","permalink":"/react-jsonschema-form/docs/version-5.24.10/json-schema/objects","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-5.24.10/json-schema/objects.md","tags":[],"version":"5.24.10","frontMatter":{},"sidebar":"docs","previous":{"title":"Dependencies","permalink":"/react-jsonschema-form/docs/version-5.24.10/json-schema/dependencies"},"next":{"title":"oneOf, anyOf, and allOf","permalink":"/react-jsonschema-form/docs/version-5.24.10/json-schema/oneof"}}');var t=r(1085),i=r(1184);const s={},a="Objects",c={},d=[{value:"Object properties",id:"object-properties",level:2},{value:"Required properties",id:"required-properties",level:2},{value:"Specifying property order",id:"specifying-property-order",level:2},{value:"Additional properties",id:"additional-properties",level:2},{value:"<code>expandable</code> option",id:"expandable-option",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"objects",children:"Objects"})}),"\n",(0,t.jsx)(n.h2,{id:"object-properties",children:"Object properties"}),"\n",(0,t.jsxs)(n.p,{children:["Objects are defined with a type equal to ",(0,t.jsx)(n.code,{children:"object"})," and properties specified in the ",(0,t.jsx)(n.code,{children:"properties"})," keyword."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'My title',\n  description: 'My description',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"required-properties",children:"Required properties"}),"\n",(0,t.jsxs)(n.p,{children:["You can specify which properties are required using the ",(0,t.jsx)(n.code,{children:"required"})," attribute:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'My title',\n  description: 'My description',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n  required: ['name'],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.h2,{id:"specifying-property-order",children:"Specifying property order"}),"\n",(0,t.jsxs)(n.p,{children:["Since the order of object properties in Javascript and JSON is not guaranteed, the ",(0,t.jsx)(n.code,{children:"uiSchema"})," object spec allows you to define the order in which properties are rendered using the ",(0,t.jsx)(n.code,{children:"ui:order"})," property:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    foo: { type: 'string' },\n    bar: { type: 'string' },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  'ui:order': ['bar', 'foo'],\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If a guaranteed fixed order is only important for some fields, you can insert a wildcard ",(0,t.jsx)(n.code,{children:'"*"'})," item in your ",(0,t.jsx)(n.code,{children:"ui:order"})," definition. All fields that are not referenced explicitly anywhere in the list will be rendered at that point:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:order': ['bar', '*'],\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"additional-properties",children:"Additional properties"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"additionalProperties"})," keyword allows the user to add properties with arbitrary key names. Set this keyword equal to a schema object:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n  },\n  additionalProperties: {\n    type: 'number',\n    enum: [1, 2, 3],\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this way, an add button for new properties is shown by default."}),"\n",(0,t.jsxs)(n.p,{children:["You can also define ",(0,t.jsx)(n.code,{children:"uiSchema"})," options for ",(0,t.jsx)(n.code,{children:"additionalProperties"})," by setting the ",(0,t.jsx)(n.code,{children:"additionalProperties"})," attribute in the ",(0,t.jsx)(n.code,{children:"uiSchema"}),"."]}),"\n",(0,t.jsxs)(n.h3,{id:"expandable-option",children:[(0,t.jsx)(n.code,{children:"expandable"})," option"]}),"\n",(0,t.jsxs)(n.p,{children:["You can turn support for ",(0,t.jsx)(n.code,{children:"additionalProperties"})," off with the ",(0,t.jsx)(n.code,{children:"expandable"})," option in ",(0,t.jsx)(n.code,{children:"uiSchema"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    expandable: false,\n  },\n};\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);