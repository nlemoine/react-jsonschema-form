"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[6838],{1184:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(4041);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},3337:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"json-schema/single","title":"Single fields","description":"The simplest example of a JSON Schema contains only a single field. The field type is determined by the type parameter.","source":"@site/docs/json-schema/single.md","sourceDirName":"json-schema","slug":"/json-schema/single","permalink":"/react-jsonschema-form/docs/json-schema/single","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/json-schema/single.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"oneOf, anyOf, and allOf","permalink":"/react-jsonschema-form/docs/json-schema/oneof"},"next":{"title":"Migration Guides","permalink":"/react-jsonschema-form/docs/migration-guides/"}}');var a=s(1085),i=s(1184);const r={},l="Single fields",o={},c=[{value:"Field types",id:"field-types",level:2},{value:"Titles and descriptions",id:"titles-and-descriptions",level:2},{value:"Enumerated values",id:"enumerated-values",level:2},{value:"Custom labels for <code>enum</code> fields",id:"custom-labels-for-enum-fields",level:3},{value:"Disabled attribute for <code>enum</code> fields",id:"disabled-attribute-for-enum-fields",level:3},{value:"Nullable types",id:"nullable-types",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"single-fields",children:"Single fields"})}),"\n",(0,a.jsxs)(n.p,{children:["The simplest example of a JSON Schema contains only a single field. The field type is determined by the ",(0,a.jsx)(n.code,{children:"type"})," parameter."]}),"\n",(0,a.jsx)(n.h2,{id:"field-types",children:"Field types"}),"\n",(0,a.jsx)(n.p,{children:"The base field types in JSON Schema include:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"string"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"number"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"integer"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"boolean"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"null"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Here is an example of a string field:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,a.jsx)(n.h2,{id:"titles-and-descriptions",children:"Titles and descriptions"}),"\n",(0,a.jsxs)(n.p,{children:["Fields can have titles and descriptions specified by the ",(0,a.jsx)(n.code,{children:"title"})," keyword in the schema and the ",(0,a.jsx)(n.code,{children:"description"})," keyword in the schema, respectively. These two can also be overridden by the ",(0,a.jsx)(n.code,{children:"ui:title"})," and ",(0,a.jsx)(n.code,{children:"ui:description"})," keywords in the uiSchema."]}),"\n",(0,a.jsxs)(n.p,{children:["Description can render markdown. This feature is disabled by default. It needs to be enabled by the ",(0,a.jsx)(n.code,{children:"ui:enableMarkdownInDescription"})," keyword and setting to ",(0,a.jsx)(n.code,{children:"true"}),". Read more about markdown options in the ",(0,a.jsx)(n.code,{children:"markdown-to-jsx"})," official ",(0,a.jsx)(n.a,{href:"https://markdown-to-jsx.quantizor.dev/",children:"docs"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'My form',\n  description: 'My description',\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,a.jsx)(n.h2,{id:"enumerated-values",children:"Enumerated values"}),"\n",(0,a.jsxs)(n.p,{children:["All base schema types support the ",(0,a.jsx)(n.code,{children:"enum"})," attribute, which restricts the user to select among a list of options. For example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  enum: ['one', 'two', 'three'],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"custom-labels-for-enum-fields",children:["Custom labels for ",(0,a.jsx)(n.code,{children:"enum"})," fields"]}),"\n",(0,a.jsxs)(n.p,{children:["JSON Schema supports the following approaches to enumerations using ",(0,a.jsx)(n.code,{children:"oneOf"}),"/",(0,a.jsx)(n.code,{children:"anyOf"}),"; react-jsonschema-form supports it as well."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  anyOf: [\n    {\n      type: 'number',\n      title: 'one',\n      enum: [1],\n    },\n    {\n      type: 'number',\n      title: 'two',\n      enum: [2],\n    },\n    {\n      type: 'number',\n      title: 'three',\n      enum: [3],\n    },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  oneOf: [\n    { const: 1, title: 'one' },\n    { const: 2, title: 'two' },\n    { const: 3, title: 'three' },\n  ],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you use ",(0,a.jsx)(n.code,{children:"enum"})," in your JSON Schema, you may instead specify ",(0,a.jsx)(n.code,{children:"ui:enumNames"})," in your ",(0,a.jsx)(n.code,{children:"uiSchema"}),", which RJSF can use to label an enumeration."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  enum: [1, 2, 3],\n};\nconst uiSchema: UiSchema = {\n  'ui:enumNames': ['one', 'two', 'three'],\n};\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"disabled-attribute-for-enum-fields",children:["Disabled attribute for ",(0,a.jsx)(n.code,{children:"enum"})," fields"]}),"\n",(0,a.jsxs)(n.p,{children:["To disable an option, use the ",(0,a.jsx)(n.code,{children:"ui:enumDisabled"})," property in the uiSchema."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'boolean',\n  enum: [true, false],\n};\n\nconst uiSchema: UiSchema = {\n  'ui:enumDisabled': [true],\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,a.jsx)(n.h2,{id:"nullable-types",children:"Nullable types"}),"\n",(0,a.jsx)(n.p,{children:"JSON Schema supports specifying multiple types in an array; however, react-jsonschema-form only supports a restricted subset of this -- nullable types, in which an element is either a given type or equal to null."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: ['string', 'null'],\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);