"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[7487],{1184:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>c});var s=i(4041);const t={},o=s.createContext(t);function d(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(o.Provider,{value:n},e.children)}},9623:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced-customization/custom-widgets-fields","title":"Custom Widgets and Fields","description":"The API allows to specify your own custom widget and field components:","source":"@site/versioned_docs/version-3.2.1/advanced-customization/custom-widgets-fields.md","sourceDirName":"advanced-customization","slug":"/advanced-customization/custom-widgets-fields","permalink":"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-widgets-fields","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-widgets-fields.md","tags":[],"version":"3.2.1","frontMatter":{},"sidebar":"docs","previous":{"title":"Custom Themes","permalink":"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-themes"},"next":{"title":"Internals","permalink":"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/internals"}}');var t=i(1085),o=i(1184);const d={},c="Custom Widgets and Fields",r={},l=[{value:"Customizing the default fields and widgets",id:"customizing-the-default-fields-and-widgets",level:2},{value:"Adding your own custom widgets",id:"adding-your-own-custom-widgets",level:2},{value:"Custom component registration",id:"custom-component-registration",level:3},{value:"Custom widget options",id:"custom-widget-options",level:3},{value:"Customizing widgets text input",id:"customizing-widgets-text-input",level:3},{value:"Custom field components",id:"custom-field-components",level:2},{value:"Field props",id:"field-props",level:3},{value:"The <code>registry</code> object",id:"the-registry-object",level:2},{value:"Custom SchemaField",id:"custom-schemafield",level:3}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"custom-widgets-and-fields",children:"Custom Widgets and Fields"})}),"\n",(0,t.jsxs)(n.p,{children:["The API allows to specify your own custom ",(0,t.jsx)(n.em,{children:"widget"})," and ",(0,t.jsx)(n.em,{children:"field"})," components:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.em,{children:"widget"})," represents a HTML tag for the user to enter data, eg. ",(0,t.jsx)(n.code,{children:"input"}),", ",(0,t.jsx)(n.code,{children:"select"}),", etc."]}),"\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.em,{children:"field"})," usually wraps one or more widgets and most often handles internal field state; think of a field as a form row, including the labels."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"customizing-the-default-fields-and-widgets",children:"Customizing the default fields and widgets"}),"\n",(0,t.jsxs)(n.p,{children:["You can override any default field and widget, including the internal widgets like the ",(0,t.jsx)(n.code,{children:"CheckboxWidget"})," that ",(0,t.jsx)(n.code,{children:"ObjectField"})," renders for boolean values. You can override any field and widget just by providing the customized fields/widgets in the ",(0,t.jsx)(n.code,{children:"fields"})," and ",(0,t.jsx)(n.code,{children:"widgets"})," props:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "boolean",\n  default: true\n};\n\nconst uiSchema = {\n  "ui:widget": "checkbox"\n};\n\nconst CustomCheckbox = function(props) {\n  return (\n    <button id="custom" className={props.value ? "checked" : "unchecked"} onClick={() => props.onChange(!props.value)}>\n    \t{String(props.value)}\n    </button>\n  );\n};\n\nconst widgets = {\n  CheckboxWidget: CustomCheckbox\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema}\n        widgets={widgets} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsx)(n.p,{children:"This allows you to create a reusable customized form class with your custom fields and widgets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const customFields = {StringField: CustomString};\nconst customWidgets = {CheckboxWidget: CustomCheckbox};\n\nfunction MyForm(props) {\n  return <Form fields={customFields} widgets={customWidgets} {...props} />;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The default fields you can override are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ArrayField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"BooleanField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"DescriptionField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"OneOfField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"AnyOfField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"NullField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"NumberField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ObjectField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"SchemaField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"StringField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"TitleField"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"UnsupportedField"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The default widgets you can override are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"AltDateTimeWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"AltDateWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"CheckboxesWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"CheckboxWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ColorWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"DateTimeWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"DateWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"EmailWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"FileWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"HiddenWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"PasswordWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"RadioWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"RangeWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"SelectWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"TextareaWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"TextWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"UpDownWidget"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"URLWidget"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"adding-your-own-custom-widgets",children:"Adding your own custom widgets"}),"\n",(0,t.jsx)(n.p,{children:"You can provide your own custom widgets to a uiSchema for the following json data types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"string"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"number"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"integer"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string"\n};\n\nconst uiSchema = {\n  "ui:widget": (props) => {\n    return (\n      <input type="text"\n        className="custom"\n        value={props.value}\n        required={props.required}\n        onChange={(event) => props.onChange(event.target.value)} />\n    );\n  }\n};\n\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsx)(n.p,{children:"The following props are passed to custom widget components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"}),": The generated id for this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"schema"}),": The JSONSchema subschema object for this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"uiSchema"}),": The uiSchema for this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"}),": The current value for this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"placeholder"}),": the placeholder for the field, if any;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"required"}),": The required status of this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"disabled"}),": ",(0,t.jsx)(n.code,{children:"true"})," if the widget is disabled;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"readonly"}),": ",(0,t.jsx)(n.code,{children:"true"})," if the widget is read-only;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"autofocus"}),": ",(0,t.jsx)(n.code,{children:"true"})," if the widget should autofocus;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onChange"}),": The value change event handler; call it with the new value every time it changes;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onKeyChange"}),": The key change event handler (only called for fields with ",(0,t.jsx)(n.code,{children:"additionalProperties"}),"); pass the new value every time it changes;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onBlur"}),": The input blur event handler; call it with the the widget id and value;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onFocus"}),": The input focus event handler; call it with the the widget id and value;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options"}),": A map of options passed as a prop to the component (see ",(0,t.jsx)(n.a,{href:"#custom-widget-options",children:"Custom widget options"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options.enumOptions"}),": For enum fields, this property contains the list of options for the enum as an array of { label, value } objects. If the enum is defined using the oneOf/anyOf syntax, the entire schema object for each option is appended onto the { schema, label, value } object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"formContext"}),": The ",(0,t.jsx)(n.code,{children:"formContext"})," object that you passed to Form."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rawErrors"}),": An array of strings listing all generated error messages from encountered errors for this widget."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"custom-component-registration",children:"Custom component registration"}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, you can register them all at once by passing the ",(0,t.jsx)(n.code,{children:"widgets"})," prop to the ",(0,t.jsx)(n.code,{children:"Form"})," component, and reference their identifier from the ",(0,t.jsx)(n.code,{children:"uiSchema"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const MyCustomWidget = (props) => {\n  return (\n    <input type="text"\n      className="custom"\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)} />\n  );\n};\n\nconst widgets = {\n  myCustomWidget: MyCustomWidget\n};\n\nconst schema = {\n  type: "string"\n};\n\nconst uiSchema = {\n  "ui:widget": "myCustomWidget"\n}\n\nrender((\n  <Form\n    schema={schema}\n    uiSchema={uiSchema}\n    widgets={widgets} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This is useful if you expose the ",(0,t.jsx)(n.code,{children:"uiSchema"})," as pure JSON, which can't carry functions."]}),"\n",(0,t.jsx)(n.h3,{id:"custom-widget-options",children:"Custom widget options"}),"\n",(0,t.jsxs)(n.p,{children:["If you need to pass options to your custom widget, you can add a ",(0,t.jsx)(n.code,{children:"ui:options"})," object containing those properties. If the widget has ",(0,t.jsx)(n.code,{children:"defaultProps"}),", the options will be merged with the (optional) options object from ",(0,t.jsx)(n.code,{children:"defaultProps"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string"\n};\n\nfunction MyCustomWidget(props) {\n  const {options} = props;\n  const {color, backgroundColor} = options;\n  return <input style={{color, backgroundColor}} />;\n}\n\nMyCustomWidget.defaultProps = {\n  options: {\n    color: "red"\n  }\n};\n\nconst uiSchema = {\n  "ui:widget": MyCustomWidget,\n  "ui:options": {\n    backgroundColor: "yellow"\n  }\n};\n\n// renders red on yellow input\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: This also applies to ",(0,t.jsx)(n.a,{href:"#custom-component-registration",children:"registered custom components"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Note: Since v0.41.0, the ",(0,t.jsx)(n.code,{children:"ui:widget"})," object API, where a widget and options were specified with ",(0,t.jsx)(n.code,{children:'"ui:widget": {component, options}'})," shape, is deprecated. It will be removed in a future release."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"customizing-widgets-text-input",children:"Customizing widgets text input"}),"\n",(0,t.jsxs)(n.p,{children:["All the widgets that render a text input use the ",(0,t.jsx)(n.code,{children:"BaseInput"})," component internally. If you need to customize all text inputs without customizing all widgets individually, you can provide a ",(0,t.jsx)(n.code,{children:"BaseInput"})," component in the ",(0,t.jsx)(n.code,{children:"widgets"})," property of ",(0,t.jsx)(n.code,{children:"Form"})," (see ",(0,t.jsx)(n.a,{href:"#custom-component-registration",children:"Custom component registration"}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"custom-field-components",children:"Custom field components"}),"\n",(0,t.jsxs)(n.p,{children:["You can provide your own field components to a uiSchema for basically any json schema data type, by specifying a ",(0,t.jsx)(n.code,{children:"ui:field"})," property."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, let's create and register a dumb ",(0,t.jsx)(n.code,{children:"geo"})," component handling a ",(0,t.jsx)(n.em,{children:"latitude"})," and a ",(0,t.jsx)(n.em,{children:"longitude"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "object",\n  required: ["lat", "lon"],\n  properties: {\n    lat: {type: "number"},\n    lon: {type: "number"}\n  }\n};\n\n// Define a custom component for handling the root position object\nclass GeoPosition extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {...props.formData};\n  }\n\n  onChange(name) {\n    return (event) => {\n      this.setState({\n        [name]: parseFloat(event.target.value)\n      }, () => this.props.onChange(this.state));\n    };\n  }\n\n  render() {\n    const {lat, lon} = this.state;\n    return (\n      <div>\n        <input type="number" value={lat} onChange={this.onChange("lat")} />\n        <input type="number" value={lon} onChange={this.onChange("lon")} />\n      </div>\n    );\n  }\n}\n\n// Define the custom field component to use for the root object\nconst uiSchema = {"ui:field": "geo"};\n\n// Define the custom field components to register; here our "geo"\n// custom field component\nconst fields = {geo: GeoPosition};\n\n// Render the form with all the properties we just defined passed\n// as props\nrender((\n  <Form\n    schema={schema}\n    uiSchema={uiSchema}\n    fields={fields} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: Registered fields can be reused across the entire schema."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"field-props",children:"Field props"}),"\n",(0,t.jsx)(n.p,{children:"A field component will always be passed the following props:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"schema"}),": The JSON schema for this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"uiSchema"}),": The ",(0,t.jsx)(n.a,{href:"#the-uischema-object",children:"uiSchema"})," for this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"idSchema"}),": The tree of unique ids for every child field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"formData"}),": The data for this field;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"errorSchema"}),": The tree of errors for this field and its children;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"registry"}),": A ",(0,t.jsx)(n.a,{href:"#the-registry-object",children:"registry"})," object (read next)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"formContext"}),": A ",(0,t.jsx)(n.a,{href:"#the-formcontext-object",children:"formContext"})," object (read next)."]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"the-registry-object",children:["The ",(0,t.jsx)(n.code,{children:"registry"})," object"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"registry"})," is an object containing the registered custom fields and widgets as well as the root schema definitions."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fields"}),": The ",(0,t.jsx)(n.a,{href:"#custom-field-components",children:"custom registered fields"}),". By default this object contains the standard ",(0,t.jsx)(n.code,{children:"SchemaField"}),", ",(0,t.jsx)(n.code,{children:"TitleField"})," and ",(0,t.jsx)(n.code,{children:"DescriptionField"})," components;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"widgets"}),": The ",(0,t.jsx)(n.a,{href:"#custom-widget-components",children:"custom registered widgets"}),", if any;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"rootSchema"}),": The root schema, which can contain referenced ",(0,t.jsx)(n.a,{href:"#schema-definitions-and-references",children:"definitions"}),";"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"formContext"}),": The ",(0,t.jsx)(n.a,{href:"#the-formcontext-object",children:"formContext"})," object;"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"definitions"})," (deprecated since v2): Equal to ",(0,t.jsx)(n.code,{children:"rootSchema.definitions"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The registry is passed down the component tree, so you can access it from your custom field and ",(0,t.jsx)(n.code,{children:"SchemaField"})," components."]}),"\n",(0,t.jsx)(n.h3,{id:"custom-schemafield",children:"Custom SchemaField"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warning:"})," This is a powerful feature as you can override the whole form behavior and easily mess it up. Handle with care."]}),"\n",(0,t.jsxs)(n.p,{children:["You can provide your own implementation of the ",(0,t.jsx)(n.code,{children:"SchemaField"})," base React component for rendering any JSONSchema field type, including objects and arrays. This is useful when you want to augment a given field type with supplementary powers."]}),"\n",(0,t.jsxs)(n.p,{children:["To proceed so, pass a ",(0,t.jsx)(n.code,{children:"fields"})," object having a ",(0,t.jsx)(n.code,{children:"SchemaField"})," property to your ",(0,t.jsx)(n.code,{children:"Form"})," component; here's an example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'\nconst CustomSchemaField = function(props) {\n  return (\n    <div id="custom">\n      <p>Yeah, I\'m pretty dumb.</p>\n      <div>My props are: {JSON.stringify(props)}</div>\n    </div>\n  );\n};\n\nconst fields = {\n  SchemaField: CustomSchemaField\n};\n\nconst schema = {\n  type: "string"\n};\n\nrender((\n  <Form schema={schema}\n        fields={fields} />\n), document.getElementById("app"));\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you're curious how this could ever be useful, have a look at the ",(0,t.jsx)(n.a,{href:"https://github.com/Kinto/formbuilder",children:"Kinto formbuilder"})," repository to see how it's used to provide editing capabilities to any form field."]}),"\n",(0,t.jsxs)(n.p,{children:["Props passed to a custom SchemaField are the same as ",(0,t.jsx)(n.a,{href:"#field-props",children:"the ones passed to a custom field"}),"."]})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);