"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[136],{1184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(4041);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},1912:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"advanced-customization/material-ui/customizing-material-ui","title":"Customizing material-ui fields and widgets","description":"Unlike most other themes, the material-ui theme supports the two distinct version of Material UI (versions 4 and 5) side-by-side.","source":"@site/versioned_docs/version-4.2.3/advanced-customization/material-ui/customizing-material-ui.md","sourceDirName":"advanced-customization/material-ui","slug":"/advanced-customization/material-ui/customizing-material-ui","permalink":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/material-ui/customizing-material-ui","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-4.2.3/advanced-customization/material-ui/customizing-material-ui.md","tags":[],"version":"4.2.3","frontMatter":{},"sidebar":"docs","previous":{"title":"Internals","permalink":"/react-jsonschema-form/docs/version-4.2.3/advanced-customization/internals"},"next":{"title":"API Reference","permalink":"/react-jsonschema-form/docs/version-4.2.3/api-reference/"}}');var i=t(1085),s=t(1184);const a={},r="Customizing material-ui fields and widgets",c={},d=[{value:"Example of a custom widget for <code>@rjsf/material-ui</code>",id:"example-of-a-custom-widget-for-rjsfmaterial-ui",level:2},{value:"Example of a custom field for <code>@rjsf/material-ui</code>",id:"example-of-a-custom-field-for-rjsfmaterial-ui",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"customizing-material-ui-fields-and-widgets",children:"Customizing material-ui fields and widgets"})}),"\n",(0,i.jsxs)(n.p,{children:["Unlike most other themes, the ",(0,i.jsx)(n.code,{children:"material-ui"})," theme supports the two distinct version of Material UI (versions 4 and 5) side-by-side.\nMaterial UI version 4 is provided by the scoped packages under ",(0,i.jsx)(n.code,{children:"@material-ui"})," and version 5 is provided by the scoped packages under ",(0,i.jsx)(n.code,{children:"@mui"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The components used by ",(0,i.jsx)(n.code,{children:"@rjsf/material-ui"})," for Material UI version 4 and version 5 have identical names and props.\nAs a result, all of the ",(0,i.jsx)(n.code,{children:"fields"})," and ",(0,i.jsx)(n.code,{children:"widgets"})," provided by the theme are identical as well.\nThe trick to making the two versions function side-by-side, was done by creating a React context, ",(0,i.jsx)(n.code,{children:"MuiComponentContext"}),", that provides the appropriate set of components used by theme, for the particular scoped package."]}),"\n",(0,i.jsxs)(n.p,{children:["In addition to this context, a custom hook, ",(0,i.jsx)(n.code,{children:"useMuiComponent()"}),", is provided to allow quick access to that component set."]}),"\n",(0,i.jsxs)(n.h2,{id:"example-of-a-custom-widget-for-rjsfmaterial-ui",children:["Example of a custom widget for ",(0,i.jsx)(n.code,{children:"@rjsf/material-ui"})]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an update to the ",(0,i.jsx)(n.code,{children:"MyCustomWidget"})," for the ",(0,i.jsx)(n.code,{children:"material-ui"})," theme"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "string"\n};\n\nimport { useMuiComponent } from \'@rjsf/material-ui/v4\';\n\nfunction MyCustomWidget(props) {\n  const { options, ...otherProps } = props;\n  const { color, backgroundColor } = options;\n  const { TextInput } = useMuiComponent();\n  return <TextInput {...otherProps} style={{ color, backgroundColor }} />;\n}\n\nMyCustomWidget.defaultProps = {\n  options: {\n    color: "red"\n  }\n};\n\nconst uiSchema = {\n  "ui:widget": MyCustomWidget,\n  "ui:options": {\n    backgroundColor: "yellow"\n  }\n};\n\n// renders red on yellow input\nrender((\n  <Form schema={schema}\n        uiSchema={uiSchema} />\n), document.getElementById("app"));\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"example-of-a-custom-field-for-rjsfmaterial-ui",children:["Example of a custom field for ",(0,i.jsx)(n.code,{children:"@rjsf/material-ui"})]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an update to the ",(0,i.jsx)(n.code,{children:"GeoPosition"})," for the ",(0,i.jsx)(n.code,{children:"material-ui"})," theme"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'const schema = {\n  type: "object",\n  required: ["lat", "lon"],\n  properties: {\n    lat: { type: "number"},\n    lon: { type: "number" }\n  }\n};\n\nimport { useMuiComponent } from \'@rjsf/material-ui/v4\';\n\n// Define a custom component for handling the root position object\nfunction GeoPosition(props) {\n  const { lat, lon } = props.formData;\n  const { Box, TextInput } = useMuiComponent();\n\n  const onChangeLat = (event) => {\n    const { target: { value } } = event;\n    const newData = { ...props.formData, lat: value };\n    props.onChange(newData);\n  };\n\n  const onChangeLon = (event) => {\n    const { target: { value } } = event;\n    const newData = { ...props.formData, lon: value };\n    props.onChange(newData);\n  };\n\n  return (\n    <Box>\n      <TextInput type="number" value={lat} onChange={onChangeLat} />\n      <TextInput type="number" value={lon} onChange={onChangeLon} />\n    </Box>\n  );\n}\n\n// Define the custom field component to use for the root object\nconst uiSchema = { "ui:field": "geo" };\n\n// Define the custom field components to register; here our "geo"\n// custom field component\nconst fields = { geo: GeoPosition };\n\n// Render the form with all the properties we just defined passed\n// as props\nrender((\n  <Form\n    schema={schema}\n    uiSchema={uiSchema}\n    fields={fields} />\n), document.getElementById("app"));\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);